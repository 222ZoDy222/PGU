<html><head>
<meta name="KeyWords" content="Информационные технологии,процессор,архитектура процессора,IA-64,risc">
<meta name="Robots" content="all">
<meta name="Description" content="http://www.citforum.ru, Краткий обзор IA-64">
<meta name="Document-state" content="Static">

<title>Краткий обзор IA-64</title>

<link rel="stylesheet" href="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/citforum.css">
<style>

</style>

<meta http-equiv="content-type" content="text/html; charset=windows-1251">
<script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/a_002" type="text/javascript"></script><style type="text/css">.gscb_a{display:inline-block;font:27px/13px arial,sans-serif}.gsst_a .gscb_a{color:#a1b9ed;cursor:pointer}.gsst_a:hover .gscb_a,.gsst_a:focus .gscb_a{color:#36c}.gsst_a{display:inline-block}.gsst_a{cursor:pointer;padding:0 4px}.gsst_a:hover{text-decoration:none!important}.gsst_b{font-size:16px;padding:0 2px;position:relative;user-select:none;-moz-user-select:none;white-space:nowrap}.gsst_e{opacity:0.55;}.gsst_a:hover .gsst_e,.gsst_a:focus .gsst_e{opacity:0.72;}.gsst_a:active .gsst_e{opacity:1;}.gsst_f{background:white;text-align:left}.gsst_g{background-color:white;border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);margin:-1px -3px;padding:0 6px}.gsst_h{background-color:white;height:1px;margin-bottom:-1px;position:relative;top:-1px}.gsib_a{width:100%;padding:4px 6px 0}.gsib_a,.gsib_b{vertical-align:top}.gssb_c{border:0;position:absolute;z-index:989}.gssb_e{border:1px solid #ccc;border-top-color:#d9d9d9;box-shadow:0 2px 4px rgba(0,0,0,0.2);-moz-box-shadow:0 2px 4px rgba(0,0,0,0.2);cursor:default}.gssb_f{visibility:hidden;white-space:nowrap}.gssb_k{border:0;display:block;position:absolute;top:0;z-index:988}.gsdd_a{border:none!important}.gsq_a{padding:0}.gscsep_a{display:none}.gssb_a{padding:0 7px}.gssb_a,.gssb_a td{white-space:nowrap;overflow:hidden;line-height:22px}#gssb_b{font-size:11px;color:#36c;text-decoration:none}#gssb_b:hover{font-size:11px;color:#36c;text-decoration:underline}.gssb_g{text-align:center;padding:8px 0 7px;position:relative}.gssb_h{font-size:15px;height:28px;margin:0.2em}.gssb_i{background:#eee}.gss_ifl{visibility:hidden;padding-left:5px}.gssb_i .gss_ifl{visibility:visible}a.gssb_j{font-size:13px;color:#36c;text-decoration:none;line-height:100%}a.gssb_j:hover{text-decoration:underline}.gssb_l{height:1px;background-color:#e5e5e5}.gssb_m{color:#000;background:#fff}.gsfe_a{border:1px solid #b9b9b9;border-top-color:#a0a0a0;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.1);}.gsfe_b{border:1px solid #4d90fe;outline:none;box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-moz-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);-webkit-box-shadow:inset 0px 1px 2px rgba(0,0,0,0.3);}.gssb_a{padding:0 7px}.gssb_e{border:0}.gssb_l{margin:5px 0}.gssb_c .gsc-completion-container{position:static}.gssb_c{z-index:5000}.gsc-completion-container table{background:transparent;font-size:inherit;font-family:inherit}.gssb_c > tbody > tr,.gssb_c > tbody > tr > td,.gssb_d,.gssb_d > tbody > tr,.gssb_d > tbody > tr > td,.gssb_e,.gssb_e > tbody > tr,.gssb_e > tbody > tr > td{padding:0;margin:0;border:0}.gssb_a table,.gssb_a table tr,.gssb_a table tr td{padding:0;margin:0;border:0}</style></head>
<body topmargin="0" alink="#800000" bgcolor="#FFFFFF" link="#006890" marginheight="0" text="#000000" vlink="#003860">
<a name="top"></a>





<!-- counters -->
<table border="0" cellpadding="0" cellspacing="0">
<tbody><tr>
<td><!--TopList COUNTER--><script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/ga_3.js" async="" charset="utf-8" type="text/javascript"></script><script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/ga_1.js" async="" charset="utf-8" type="text/javascript"></script><script language="JavaScript"><!--
d=document;js=10;a=';r='+escape(d.referrer)
//--></script><script language="JavaScript1.1"><!--
js=11;a+=';j='+navigator.javaEnabled()
//--></script><script language="JavaScript1.2"><!--
js=12;s=screen;a+=';s='+s.width+'*'+s.height
a+=';d='+(s.colorDepth?s.colorDepth:s.pixelDepth)
//--></script><script language="JavaScript1.3"><!--
js=13//--></script><script language="JavaScript"><!--
d.write('<img src="http://top.list.ru/counter'+
'?id=26978;js='+js+a+'" alt="" height=1 width=1>')
if(js>11)d.write('<'+'!-- ')//--></script><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/counter.gif" alt="" height="1" width="1"><!-- <noscript><img
src="http://top.list.ru/counter?js=na;id=26978"
height=1 width=1 alt=""></noscript><script language="JavaScript"><!--
if(js>11)d.write('--'+'>')
//--><!--TopList COUNTER--></td>
<td><!--LiveInternet counter--><script language="JavaScript"><!--
document.write('<img src="http://counter.yadro.ru/hit?r'+
escape(document.referrer)+((typeof(screen)=='undefined')?'':
';s'+screen.width+'*'+screen.height+'*'+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+';u'+escape(document.URL)+
';i'+escape('Жж'+document.title)+';'+Math.random()+
'" width=1 height=1 alt="">')//--></script><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/hit.gif" alt="" height="1" width="1"><!--/LiveInternet--></td>
<td><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/top100.gif" alt="" border="0" height="1" width="1"></td>
</tr></tbody></table>
<!-- end of counters -->



<center><table cellpadding="0" cellspacing="0" width="990">
<tbody><tr><td>

    <table border="0" cellpadding="0" cellspacing="0" width="100%">
    <tbody><tr valign="bottom">
  <td align="left"><a href="http://citforum.ru/"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/citlogo8.gif" alt="Logo" border="0" height="44" width="140"></a></td>

      <td style="padding-left: 200px; padding-bottom: 5px" align="left"><font size="2"><a class="head" href="http://forum.citforum.ru/">Форумы</a></font></td>
      <td style="padding-left: 50px; padding-bottom: 5px" align="left"><font size="2"><a class="head" href="http://citforum.ru/gazeta/">Газета</a></font></td>
      <td style="padding-bottom: 10px" align="right" width="100%"><nobr><font size="2"><b>Море(!) аналитической информации!</b></font></nobr></td>
    </tr>
    </tbody></table>




<center style="margin-top: 3px">

<!--  AdRiver code START. Type:728x90 Site: citforum PZ: 0 BN: 1 -->
<script language="javascript" type="text/javascript"><!--
var RndNum4NoCash = Math.round(Math.random() * 1000000000);
var ar_Tail='unknown'; if (document.referrer) ar_Tail = escape(document.referrer);
document.write(
'<iframe src="http://ad.adriver.ru/cgi-bin/erle.cgi?'
+ 'sid=137295&bn=1&target=blank&bt=36&pz=0&rnd=' + RndNum4NoCash + '&tail256=' + ar_Tail
+ '" frameborder=0 vspace=0 hspace=0 width=728 height=90 marginwidth=0'
+ ' marginheight=0 scrolling=no></iframe>');
//--></script><iframe class="llkbcbkdmmxssvtbozzr" src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/erle.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" height="90" width="728"></iframe>
<noscript>
<a href="http://ad.adriver.ru/cgi-bin/click.cgi?sid=137295&bn=1&bt=36&pz=0&rnd=1013420086" target=_blank>
<img src="http://ad.adriver.ru/cgi-bin/rle.cgi?sid=137295&bn=1&bt=36&pz=0&rnd=1013420086" alt="-AdRiver-" border=0 width=728 height=90></a>
</noscript>
<!--  AdRiver code END  -->


</center>


</td></tr>
<tr><td>

<table style="padding-top: 3px" border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="931"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr>
<tr><td bgcolor="#008080">

<table border="0" cellpadding="3" cellspacing="1" width="100%">
<tbody><tr>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/consulting/">IT-консалтинг</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/SE/">Software Engineering</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/programming/">Программирование</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/database/">СУБД</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/security/">Безопасность</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/internet/">Internet</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/nets/">Сети</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/operating_systems/">Операционные системы</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/hardware/">Hardware</a></font></td>
<!--
<td bgcolor=#F4F9F3 align=center><font size=-1><a class=head href=/faq/>FAQ (ЧаВО)</a></font></td>
<td bgcolor=#F4F9F3 align=center><font size=-1><a class=head href=/howto/>HOWTO</a></font></td>
--> 
</tr>
</tbody></table>

</td></tr>
</tbody></table>

</td></tr>
<tr><td>
<table style="padding-top: 3px" border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr valign="top">

<td style="padding: 0 5px" width="98%">


<div class="document _ga1_on_">
<!--B2BCONTEXT_CONTENT_BEGIN-->

<div align="right"><i>2000 г</i></div>
<!-- start -->
<h3 align="center">Краткий обзор IA-64</h3>
<p align="center">Журнал <a href="http://www.osmag.ru/">"Открытые Системы"</a>, #09-10/1999 <br>
<i>Михаил Кузьминский  </i>

</p><p alin="justify">Знание архитектуры процессора, или в более узком 
смысле, его системы команд, необходимо не только для программирующих на 
языке ассемблера данного процессора. В учебные курсы в области 
информатики традиционно входят дисциплины, в которых рассматривается 
программирование на ассемблере. В период доминирования больших 
универсальных ЭВМ большинство специалистов знали ассемблер мэйнфреймов 
IBM S/360-370 (соответственно ЕС ЭВМ). Затем доминирующим стал, 
вероятно, ассемблер x86. Современные специалисты по компьютерным 
архитектурам хорошо знают и системы команд RISC-процессоров.
</p><p alin="justify">Системы команд современных RISC-процессоров во 
многом похожи друг на друга. Например, говорят, что в этом смысле MIPS и
 Alpha близки друг к другу. Однако появление архитектуры IA-64, которая 
претендует на монополию на рынке микропроцессоров, разработчики из HP и 
Intel характеризуют как наступление эры "пост-RISC". Доступная 
информация свидетельствует, что IA-64 революционным образом отличается 
от предшественников, даже от своих прямых предков таких, как HP PA-RISC.
 Процессоры с архитектурой IA-64 (Merced, McKinley и т.д.) могут обойти 
RISC-процессоры по производительности.
</p><p alin="justify">Со временем архитектура IA-64 способна вытеснить в
 будущем x86 (IA-32) не только на рынке, но и в качестве багажа "базовых
 знаний" специалистов по информатике. Однако необходимость разработки 
для IA-64 весьма сложных компиляторов и трудности с созданием 
оптимизированных машинных кодов может вызвать дефицит специалистов, 
пишущих на ассемблере IA-64, особенно на начальных этапах. Это делает 
актуальным анализ IA-64.
</p><p alin="justify">На момент подготовки статьи детали 
микроархитектуры процессора Merced, получившего официальное название 
Itanium, все еще не раскрыты. Официальная информация [1,2] позволяет 
сделать определенные предположения о характеристиках Itanium. Укажем 
также на публикацию по микроархитектуре E2K [3] отечественной 
разработки, имеющей близкие к IA-64 архитектурные особенности.
</p><p alin="justify">Основным источником данных для данной статьи 
послужили, естественно, публикации [1,2]. Мы остановимся в первую 
очередь на концептуально новых особенностях IA-64 и общем описании. 
Более традиционные части системы команд IA-64 напоминают обычный набор 
команд RISC, в первую очередь архитектуры PA-RISC. Cовместимость с 
PA-RISC в IA-64 обеспечивается за счет динамической трансляции команд 
(т.е. подобно Compaq/DEC FX!32). Применительно к прикладным программам 
такой подход оказывается вполне эффективным благодаря близости части 
команд PA-RISC к соответствующим командам IA-64.
</p><p alin="justify">Что касается аппаратно поддерживаемой 
совместимости с архитектурой IA-32, то, с точки зрения автора, это тема 
для отдельного разговора; основной интерес представляет собой в первую 
очередь принципиально новые черты IA-64. По мнению автора, аппаратная 
совместимость с IA-32 препятствует эффективному развитию IA-64 и росту 
производительности. Косвенным подтверждением этому служат неофициальные 
"приватные" данные о том, что McKinley, производительность которого 
должна быть гораздо выше Merced, якобы не имеет столь развитых средств 
аппаратной поддержки IA-32, как у Merced.
</p><p alin="justify">Наиболее кардинальным нововведением IA-64 по 
сравнению с RISC является "явный параллелизм команд (EPIC - Explicitly 
Parallel Instruction Computing), привносящий в IA-64 некоторые элементы,
 напоминающие архитектуру "сверхбольшого командного слова" (VLIW - Very 
Large Instruction Word). В обеих архитектурах явный параллелизм 
представлен уже на уровне команд, управляющих одновременной работой 
функциональных исполнительных устройств (ФИУ). Соответствующие "широкие 
команды" HP/Intel назвали связками (bundle).
</p><p align="center">

<img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/ia64_01.jpg" border="0" height="28" width="146">
</p><p align="center">Рис. 1. Формат связки команд IA-64

</p><p alin="justify">Связка имеет длину 128 разрядов (рис. 1). Она 
включает 3 поля - "слота" для команд длиной 41 разрядов каждая, и 
5-разрядное поле шаблона. Предполагается, что команды связки могут 
выполняться параллельно разными ФИУ. Возможные взаимозависимости, 
препятствующие параллельному выполнению команд связки, отражаются в поле
 шаблона. Не утверждается, впрочем, что параллельно не могут выполняться
 и команды разных связок.
</p><p alin="justify">Шаблон указывает, какого типа команды находятся в 
слотах связки. В общем случае команды одного типа могут выполняться в 
более чем одном типе ФИУ (табл.1). Шаблоном задаются так называемые 
остановки, определяющие слот, после начала выполнения команд которого 
команды последующих слотов должны ждать завершения. Порядок слотов в 
связке (возрастание справа налево) отвечает и порядку байт - little 
endian. Однако данные в памяти могут располагаться и в режиме big 
endian. Режим устанавливается специальным разрядом в регистре маски 
пользователя.
</p><p>
<table align="center" border="1" cellpadding="3" cellspacing="0">
<caption>Таблица 1. Типы команд и исполнительных устройств</caption>
<tbody><tr><th>Тип команд</th><th> Тип исполнительного устройства</th><th> Описание команд</th></tr>
<tr><td>A</td><td> I или M </td><td>Целочисленные, АЛУ </td></tr>
<tr><td>I</td><td> I</td><td> Целочисленные неарифметические </td></tr>
<tr><td>M</td><td> M</td><td> Обращение в память </td></tr>
<tr><td>F</td><td> F</td><td> C плавающей запятой </td></tr>
<tr><td>B</td><td> B</td><td> Переходы </td></tr>
<tr><td>L+X</td><td> I </td><td>Расширенные </td></tr>
</tbody></table>
</p><p alin="justify">При использовании ассемблера остановки отмечаются 
двумя подряд знаками "точка с запятой" - ";;". Места, в которых 
необходимо указывать остановку выглядят интуитивно понятными, по крайней
 мере, в приведенных в [1,2] примерах.
</p><p alin="justify">Последовательность команд от остановки до 
остановки (или выполняемого перехода) называется группой команд. Она 
начинается с заданного адреса команды (адрес связки плюс номер слота) и 
включает все последующие команды - с увеличением номера слота в связке, а
 затем и адресов связок, пока не встретится остановка.

</p><h4>РЕГИСТРЫ</h4>
<p alin="justify">Рассмотрим теперь файлы регистров IA-64. В их число 
входят: 128 регистров общего назначения GR; 128 регистров с плавающей 
запятой FR; 64 регистра предикатов PR; 8 регистров перехода BR; 128 
прикладных регистра AR; не менее 4 регистров идентификатора процессора 
CPUID; cчетчик команд IP, указывающий на адрес связки, содержащей 
исполняемую команду; регистр маркера текущего окна CFM, описывающий окно
 стека регистров и др.
</p><p alin="justify">Регистры CPUID являются 64-разрядными. В 
CPUID-регистрах 0 и 1 лежит информация о производителе, в регистре 2 
находится серийный номер процессора, а в регистре 3 задается тип 
процессора (cемейство, модель, версия архитектуры и т.п.) и число 
CPUID-регистров. Разряды регистра 4 указывают на поддержку конкретных 
особенностей IA-64, т.е. тех, которые реализованы в данном процессоре.
</p><p alin="justify">Прикладные регистры AR0-AR127 - специализированные
 (в основном 64-разрядные) регистры, применяемые в IA-64 и IA-32. AR0-7 
называются регистрами ядра; запись в них привилегирована, но они 
доступны на чтение в любом приложении и используются для передачи 
приложению сообщений от операционной системы.
</p><p alin="justify">Среди других прикладных регистров укажем на AR16 
(RSC) - регистр конфигурации стека регистров, используемый для 
управления работой "машиной" стека регистров IA-64 (RSE); AR17 (BSP), в 
котором находится адрес в памяти, где сохраняется положение GR32 в 
текущем окне стека; AR40 (FPSR) - регистр состояния для команд с 
плавающей запятой IA-64; AR44 (ITC) - интервальный таймер; AR64 (PFS) - 
регистр предыдущего состояния функции, куда автоматически копируются 
некоторые другие регистры при вызове подпрограмм; AR65 (LC), 
используемый для организации циклов со счетчиком, и, наконец, 
6-разрядный регистр эпилога AR66 (EC). Ряд AR-регистров является 
фактически регистрами IA-32 (дескриптор сегмента кодов, дескриптор 
сегмента стека и др.).
</p><p alin="justify">64-разрядные регистры GR0-127 применяются не 
только для целочисленных операций IA-64; GR8-31 в режиме IA-32 
используются также под целочисленные регистры и регистры селекторов и 
дескрипторов сегментов IA-32. GR0-31 называются статическими регистрами 
(GR0 всегда содержит 0), а GR32-127 - стекируемыми регистрами. 
Статические регистры "видны" всем программам. Стекируемые регистры 
становятся доступными в программной единице через окно стека регистров, 
включающее локальные и выходные регистры, число которых задается 
командой alloc.
</p><p alin="justify">82-разрядные регистры с плавающей запятой FR0-127 
также подразделяются на статические (FR0-31, причем всегда FR0=0.0, 
FR1=1.0) и вращаемые (FR32-127). FR8-31 в режиме IA-32 содержат числа с 
плавающей запятой и мультимедийные регистры.
</p><p alin="justify">Вращение регистров является в некотором роде 
частным случаем переименования регистров, применяемого во многих 
современных суперскалярных процессоров с внеочередным спекулятивным 
выполнением команд. В отличие от них, вращение регистров в IA-64 
управляется программно. К обсуждению вращения регистров мы вернемся 
ниже, а содержимое FR будет рассмотрено в разделе, посвященном операциям
 с плавающей запятой.
</p><p alin="justify">64-разрядные регистры переходов BR0-7 применяются 
для указания адреса перехода в соответствующих командах перехода (если 
адрес перехода не кодируется в команде явно). Регистры предикатов PR0-63
 являются одноразрядными; в них помещаются результаты команд сравнения. 
Обычно эти команды устанавливают сразу два геистра PR в зависимости от 
условия - соответственно истинность условия и его отрицания. Такая 
избыточность обеспечивает дополнительную гибкость.
</p><p alin="justify">В отечественном микропроцессоре E2K [3] 
предикатных регистров в два раза меньше. Хотя это позволяет хранить 
столько же условий, сколько в IA-64, в последней предикатные регистры 
применяются еще и для организации программно конвейеризованных циклов 
(Software Pipelining - SWP). Использование предикатных регистров - 
важнейшая особенность, кардинально отличающая IA-64 от всех других 
микропроцессоров, кроме E2K.
</p><p alin="justify">PR0-15 являются статическими (PR0 всегда равен 1),
 а PR16-63 - вращаемыми. Статические предикатные регистры используются в
 командах условного перехода. Кроме того, почти все команды IA-64 могут 
быть выполнены "под предикатом".
</p><p><b>Работа стека регистров</b>
</p><p alin="justify">Файл регистров GR отличается от FR и PR тем, что 
последние содержат фиксированные подмножества статических и вращаемых 
регистров, в то время как в файле GR вне подмножества статических 
регистров применяется стек регистров, и программной единице доступна 
лишь его часть - окно стека регистров. В отличие от статических 
регистров, стекируемое подмножество локально для любой программной 
единицы и может иметь размер от 0 до 96 регистров, начиная с GR32.
</p><p alin="justify">Использование этого механизма в IA-64 позволяет, 
как мы увидим, избежать накладных расходов, связанных с 
сохранением/восстановлением большого числа регистров при вызовах 
подпрограмм и возвратах из них (однако статические регистры при 
необходимости все-таки приходится сохранять и восстанавливать, явно 
кодируя соответствующие команды). Автоматическое 
сохранение/восстановление стекируемого подмножества регистров 
осуществляет RSE, и в программе об этом заботиться не надо. В режиме 
IA-32 работа с этим стеком регистров, естественно, отключается.
</p><p alin="justify">Мы до сих пор не рассматривали один из важнейших 
регистров IA-64 - 38-разрядный регистр CFM, в котором как раз 
сохраняется состояние "текущего" окна стека регистров. Как и другие 
маркеры окна, CFM содержит общий размер окна стека, число локальных 
регистров и (кратное 8) число вращаемых регистров в окне, а также 3 
значения базы для переименования регистров - соответственно rrb.gr, 
rrb.fr и rrb.pr.
</p><p alin="justify">Итак, окно стека имеет две области переменного 
размера - локальную и выходную. Рассмотрим вызов процедур подробнее. При
 переходе типа "вызов процедуры" CFM вызывающей подпрограммы сохраняется
 в поле PFM (Previous Frame Marker) регистра PFS, и создается CFM 
вызываемой подпрограммы. Сразу после вызова размер локальной области 
вызываемой подпрограммы равен размеру выходной области вызывающей и 
перекрывается с ней. При этом стекируемые регистры автоматически 
переименовываются таким образом, что первый регистр выходной области 
вызывающей подпрограммы становится регистром GR32 вызываемой (рис.2, где
 procA - это вызывающая, а procB - вызываемая подпрограмма). Перекрытие 
их выходных областей позволяет эффективно передавать параметры через 
регистры.
</p><p align="center">

<img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/ia64_02.gif" border="0" height="217" width="400">
</p><p align="center">Рис. 2. Стек регистров при вызове procB из procA

</p><p alin="justify">Как мы уже указывали, вызываемая подпрограмма 
может изменить размеры своих локальной и выходной областей командой 
alloc; cоответствующим образом будут изменены и поля в CFM. Команда 
alloc обычно используется вызываемой подпрограммой для того, чтобы 
распределить себе определенное число локальных регистров и заиметь 
выходную область для передачи параметров уже собственному "потомку". 
Если запрошенное в команде alloc количество регистров оказывается 
недоступным (переполнение стека), alloc приостанавливает процессор и RSE
 будет сохранять регистры вызывающей подпрограммы, пока запрошенное 
alloc число регистров не будет доступным.
</p><p alin="justify">При переходе типа "возврат из процедуры" CFM 
восстанавливается из PFM, а обратное переименование регистров 
восстанавливает состояние вызывающей подпрограммы. Если некоторые ее 
регистры были ранее "сброшены" RSE, то при возврате RSE приостановит 
процессор до тех пор, пока не будут восстановлены эти регистры.

</p><h4>CИСТЕМА КОМАНД IA-64</h4>
<p alin="justify">В этом разделе статьи мы дадим краткий обзор системы 
команд IA-64, а точнее, ее "непривилегированной части". Именно это 
подмножество команд определяет наиболее принципиальные особенности 
IA-64. Cреди этих принципиальных особенностей следует особо отметить 
спекулятивное выполнение команд и применение предикатов.
</p><p alin="justify">Все рассматриваемые команды можно подразделить на:
 команды работы со стеком регистров (например, alloc); целочисленные 
команды; команды сравнения и работы с предикатами; команды доступа в 
память; команды перехода; мультимедийные команды; команды пересылок 
между регистрами; "разные" (операции над строками и подсчет числа единиц
 в слове); команды работы с плавающей запятой.
</p><p alin="justify">Целочисленные команды IA-64 включают 
арифметические операции (add, sub и др.), логические операции (and, or, 
xor и др.), операции над битами и сдвиги, а также 32-разрядные операции.
 Большинство этих команд трехадресные, а их аргументы лежат в регистрах;
 однако встречается и литеральное представление аргументов. Имеются 
также модификации команд add и sub, которые являются четырехадресными: в
 них к сумме/разности регистров прибавляется/вычитается 1.
</p><p alin="justify">Отметим, что команда умножения целых чисел в 
регистрах GR отсутствует; для перемножения необходима пересылка целых в 
регистры FR и применение операции умножения, выполняемой в ФИУ 
вещественного типа. Некоторые специалисты считают это "наименее удачной"
 чертой системы команд IA-64.
</p><p alin="justify">Команды сравнения и работа с предикатами - это 
одна из принципиально новых особенностей IA-64 по сравнению с 
RISC-архитектурой. Приведем сначала несколько типичных примеров команд 
этой группы. Команда cmp сравнивает два регистра GR (или регистр GR и 
литерал) на одно из 10 возможных условий (больше, меньше или равно и 
т.п.). Команда tbit тестирует заданный бит GR. Команда fcmp сравнивает 
два числа с плавающей запятой. Однако результатом сравнения является не 
единственный код условия, что типично для обычных процессоров. 
Логический результат сравнения (1 - истина, 0 - ложь) записывается 
обычно в пару предикатных регистров (во второй пишется отрицание 
первого).
</p><p alin="justify">Эти значения предикатных регистров используются 
затем не только в командах условного перехода, как в обычных 
микропроцессорах. Почти все команды IA-64 выполнимы "под предикатом", 
т.е. могут выполняться или нет в зависимости от значения указанного в 
команде PR-регистра. Это позволяет во многих случаях избежать применения
 условных переходов, которые, как известно, отрицательно сказываются на 
производительности микропроцессоров. Вместо этого процессор c 
архитектурой IA-64, имеющий большое число ресурсов (в частности, 
регистров и ФИУ), может исполнить обе ветви программы. Рассмотрим 
простейший Пример 1.

</p><p><b>Пример 1.</b>
</p><p>Фрагмент программы в фортрановском представлении:
</p><pre>IF(I.EQ.J) THEN
	   K=K+1
ELSE
	   L=L+1
ENDIF</pre>
<p>в ассемблерном:
</p><pre>cmp.eq p3,p4=r4,r5;;
 (p3) add     r6=r6,r0,1
 (p4) add     r7=r7,r0,1</pre>
<p alin="justify">(мы используем, вслед за [1], "фортрановский" 
синтаксис). Предположим, что значения I, J, K, L уже лежат в r4, r5, r6,
 r7 cоответственно (так обозначаются регистры GR в ассемблере IA-64). 
Тогда мы получим следующий фрагмент программы...
</p><p alin="justify">Здесь команды сложения add использованы в 
четырехадресной форме; они помещают в регистр-результат (r6 и r7 
соответственно) старое значение этого регистра плюс 1 (формально еще 
плюс значение в r0, которое равно нулю). Команды add используются с так 
называемыми квалифицирующими предикатами p3, p4. Если значения I и J 
совпадают, то получаем значения предикатных регистров (p3) = 1, а (р4) =
 0. Тогда первая команда add выполняется, а вторая - нет.
</p><p alin="justify">Преимуществом такого подхода состоит в линейности 
выполняемого участка программы вместо ветвления. Обе команды add могут, 
кстати, выполниться параллельно. Возможности команд типа условной 
пересылки cmove в ряде RISC-процессоров, в общем случае значительно 
меньше, чем предикатный подход. Это преимущество IA-64 становится еще 
более существенным, если учесть расширенные возможности спекулятивного 
выполнения команд в IA-64.
</p><p><b>Спекулятивное выполнение</b>
</p><p alin="justify">Рассмотрим теперь команды доступа в память. Прежде
 всего, это команды загрузки регистров и записи из них в оперативную 
память. Команда ld загружает в GR 1-, 2-, 4- и 8-байтные целочисленные 
величины; аналогично ldf загружает в FR числа с плавающей запятой 
размером 4, 8, 10 байт, а также пары 4-байтных чисел. В этих командах 
можно указать также на тонкие особенности работы с оперативной памятью и
 кэшем. Имеются и специальные команды работы с кэшем.
</p><p alin="justify">Принципиальной является возможность кодирования 
указанных команд загрузки в специальных спекулятивных формах. Различают 
загрузку спекулятивную по управлению и спекулятивную по данным.
</p><p alin="justify">Спекулятивное по управлению выполнение означает 
возможность заранее выполнить команды, расположенные за командой 
условного перехода, до того, как будет известно, будет ли осуществляться
 этот условный переход на соответствующую ветвь программы. При наличии 
большого числа ресурсов процессора это позволяет заранее запускать на 
выполнение команды, которые начнут выполняться одновременно с уже 
начавшими выполняться другими командами (в других ФИУ). Однако позднее 
может выясниться, что эти спекулятивно выполненные команды оказались 
выполненными напрасно, так как переход на эту ветвь не произошел, и 
нужно произвести "откат".
</p><p alin="justify">Поскольку эти спекулятивно выполненные команды 
могут привести к прерыванию, в IA-64 предусмотрен механизм, позволяющий 
зафиксировать, что возникло прерывание, но само прерывание "отложить" до
 тех пор, пока не будет затребован опрос его наличия. Признак 
отложенного прерывания записывается в регистр результата (затем его 
можно опросить специальной командой chk.s). В дальнейшем признак 
отложенного прерывания последовательно "распространяется" на регистры 
результатов спекулятивных команд, в регистрах исходных данных которых 
взведен признак отложенного прерывания.
</p><p alin="justify">Все команды можно разделить на спекулятивно 
выполнимые и спекулятивно невыполнимые. Последние могут вызывать 
прерывания, которые не могут быть отложены. Обычные вычислительные 
команды, имеющие GR или FR в качестве регистров результата, - 
спекулятивные. Если же команда изменяет другие типы регистров, она 
неспекулятивная.
</p><p alin="justify">Кроме обычных неспекулятивных команд (ld, ldf...) в
 IA-64 имеются их спекулятивные модификации (ld.s, ldf.s...). 
Вычислительные команды в общем случае не вызывают прерываний (операции с
 плавающей запятой обрабатывают прерывания специальным образом), поэтому
 единственным способом сгенерировать признак отложенного прерывания 
являются команды спекулятивной загрузки. Другие команды его могут только
 "распространять".
</p><p alin="justify">В точке программы, где надо использовать результат
 спекулятивного выполнения, следует применять спекулятивную команду 
chk.s, проверяющую признак отложенного прерывания. Если оно имелось, 
chk.s передаст управление по указанному в ней адресу, по которому 
программист должен расположить коды обработки ситуации. Поскольку стало 
ясно, что спекулятивное выполнение команды действительно понадобилось, 
можно закодировать копию спекулятивно выполненного фрагмента программы, 
но уже с неспекулятивными командами загрузки.
</p><p alin="justify">Другой тип спекулятивного выполнения может иметь 
место, когда вслед за записью в память идет команда загрузки регистра, и
 невозможно заранее определить, не будут ли перекрываться в памяти 
используемые этими командами данные. В IA-64 имеются спекулятивные 
команды загрузки (ld.a, ldf.a...), которые называются 
"усовершенствованными" (advanced) командами загрузки. Аналогично 
взаимозависимости между командами по управлению, "расшиваемой" 
применением спекулятивных команд с "постфиксом" .s, продвинутые команды 
загрузки вместе с соответствующей командой проверки chk.a (аналог chk.s)
 позволяют исключить задержки выполнения при наличии взаимозависимости 
по данным.
</p><p alin="justify">Обратимся теперь к командам перехода. Адрес 
перехода выравнивается всегда на границу связки, т.е. управление 
передается на ее слот 0. Имеется команда перехода относительно счетчика 
команд, в которой явно кодируется 21-разрядное смещение. Эти переходы 
осуществимы в пределах +/-16 Мбайт относительно счетчика. В непрямых 
командах перехода адрес перехода задается в регистре BR.
</p><p alin="justify">Обычный условный переход br.cond, или просто br, 
использует значение кодируемого в команде предикатного регистра PR для 
определения истинности условия. Указав в команде PR0, в котором всегда 
лежит 1, можно получить безусловный переход. PR0 кодируется также в 
командах вызова процедур/возврата (br.call/br.ret). Имеется 5 типов 
команд перехода, применяемых для организации циклов. Команда br.cloop 
используется для организации циклов со счетчиком, в которых адрес 
перехода кодируется относительно IP. В команде используется регистр LC: 
если он не равен 0, его содержимое уменьшается на 1, и выполняется 
переход; если LC = 0, перехода не будет. Применение команд работы с 
циклами мы рассмотрим позже при обсуждении программно конвейеризованных 
циклов.
</p><p alin="justify">В расширении кода операции команды перехода можно 
закодировать подсказку для процессора о стратегии динамического или 
статического предсказания этого перехода. Подобные схемы используются в 
PA-8x00.
</p><p><b>Операции с плавающей запятой</b>
</p><p alin="justify">Программная модель вычислений с плавающей запятой в
 IA-64, в отличие от IA-32, ориентирована на работу с регистрами FR, а 
не со стеком, что уже само по себе облегчает создание более 
высокопроизводительных программ. В IA-64 непосредственно поддерживается 6
 типов данных, в том числе три стандарта IEEE754 (одинарная точность SP,
 двойная точность DP и двойная расширенная точность DE),
</p><p alin="justify">82-разрядный формат FR и 64-разрядные целые - со 
знаком и без знака. Формат DE, также как и формат с размещением двух 
чисел (SP) с плавающей запятой, используемый в векторных мультимедийных 
командах, унаследован архитектурой IA-64 от IA-32. Формат регистров FR 
включает 64-разрядную мантиссу, 17-разрядный порядок и 1 бит под знак 
числа. Кроме того, на уровне подпрограмм предлагается поддержка 
четверной точности.
</p><p alin="justify">В 64-разрядном регистре FPSR указываются признаки 
деления на ноль, переполнения порядка, исчезновения порядка, потери 
значимости, формат данных и другая информация о состоянии.
</p><p alin="justify">FP-команды загрузки имеют модификации, 
соответствующие всем аппаратно поддерживаемым типам данных, которые в 
ассемблере задаются последним символом мнемокода (lfds - для SP, ldfd - 
для DP и т.д.). Арифметические команды включают операции типа 
"умножить-и-сложить" и "умножить-и-вычесть", команды вычисления 
максимума/минимума, а также команды расчета обратной величины и 
обратного квадратного корня. Применение двух последних вместо команд 
деления и квадратного корня соответственно упрощает работу с 
конвейерами. Реализация команды обращения вместо деления была применена,
 как известно, еще в легендарном Cray-1.
</p><p alin="justify">Приведем Пример 2, иллюстрирующий как работу с 
плавающей запятой, так и организацию циклов со счетчиком - сложение двух
 массивов чисел с плавающей запятой (DP).
</p><p><b>Пример 2.</b>
</p><p>Фрагмент программы в фортрановском представлении:
</p><pre>DO I=1,N
	C(I)=A(I)+B(I)
ENDDO</pre>
<p>в ассемблерном:
</p><pre>Lbl: ldfd f6=[r6],8 //Загрузка в f6 A(I)
 ldfd f7=[r7],8;;  //Загрузка в f7 B(I)
 fadd f8=f6, f7;;  //Сложение f6 и f7
 stfd [r8]=f8,8   //Запись C(I)
 br.cloop Lbl;;   //Переход на метку</pre>
<p alin="justify">В его ассемблерном представлении приведено только собственно тело цикла.
</p><p alin="justify">В этом примере предполагается, что в регистре r6 
лежит адрес начала массива A, в r7 - начала массива B, а в r8 - начала 
массива С. После выполнения каждой команды ldfd и команды stfd 
содержимое регистров r6-8 соответственно увеличивается на 8 (размер 
элемента массива в байтах), что указывается в последнем аргументе этих 
команд. Команда fadd складывает регистры f6 и f7, помещая результат в 
f8. Наконец, br.cloop обеспечивает переход на начало тела цикла. Не 
правда ли, очень похоже на старый добрый RISC? То ли еще будет...

</p><h4>ПРОГРАММНО КОНВЕЙЕРИЗОВАННЫЕ ЦИКЛЫ</h4>
<p alin="justify">Cовременные оптимизирующие компиляторы суперскалярных 
RISC-процессоров активно используют технику SWP ([4]). Аппаратная 
поддержка SWP в IA-64 имеет принципиальное значение для увеличения 
производительности и эффективности использования оперативной памяти.
</p><p alin="justify">SWP-циклы аналогичны обычным аппаратным 
конвейерам. В таком цикле также имеется три фазы. В фазе заполнения 
конвейера (пролог) новая итерация цикла запускается на выполнение на 
каждой стадии. В фазе ядра на каждой стадии запускается одна итерация, и
 одна итерация завершается (конвейер заполнен). В фазе эпилога новых 
итераций не запускается, а завершается выполнение ранее запущенных 
итераций (см. Пример 3).
</p><p><b>Пример 3.</b>
</p><p>Фрагмент программы в фортрановском представлении:
</p><pre>DO I=1,N
	IND(I)=JND(I)+K
ENDDO</pre>
<p>в ассемблерном:
</p><pre>Lbl:ld8 r8=[r5],8;; //Загрузка JND(I)
add r9=r8,r7;; //r9=r8+r7
st8 [r6]=r9,8  //Запись IND(I)
br.cloop Lbl;; //Переход по счетчику
SWP-аналог:
mov lc=99   //Установка LC
mov ec=4   //Установка EC
mov pr.rot=1&lt;&lt;16 //Установка PR
Lbl:
(p16) ld8 r32=[r5],8;; //Загрузка JND(I)
(p18) add r35=r34,r7;; //r35=r34+r7
(p19) st8 [r6]=r36,8   //Запись IND(I)
   br.ctop Lbl;;</pre>
<p alin="justify">Число тактов T между запуском последовательных 
итераций цикла называется интервалом инициации. Мы рассмотрим только 
случай постоянного числа тактов. В простейшем случае T равно 1, 
очередная итерация цикла может запускаться на каждом такте.
</p><p alin="justify">Каждой стадии цикла должен быть выделен PR-регистр
 из области вращения, определяющий, следует ли выполнять команды данной 
стадии. В простейшем случае стадия цикла включает одну команду. При 
использовании раскрутки (unrolling) циклов, которую часто необходимо 
применять для эффективного использования ресурсов процессора, каждая 
стадия включает несколько однотипных команд (скажем, для четных и 
нечетных итераций - при двухкратной раскрутке). В этом случае для каждой
 команды стадии кодируется один и тот же PR-регистр.
</p><p><b>Пример 4.</b>
</p><p>Фрагмент программы в фортрановском представлении:
</p><pre>    DO I=1,N
	S=S+A(I)*B(I)
ENDDO</pre>
<p>SWP-аналог:
</p><pre>Lbl:
(p16) ldfd f50=[r5],8  //Загрузка A(I)
(p16) ldfd f60=[r6],8  //Загрузка B(I)
(p25) fma  f41=f59,f69,f46 //f41=f59*f69+f46
  br.ctop.sptk Lbl;;
  fadd f7=f42,f43 //Частичная сумма 1
  fadd f8=f44,f45;; //Частичная сумма 2
  fadd f9=f7,f8;;  //Их сумма
  fadd f10=f9,f46 //Окончательная сумма</pre>
<p alin="justify">SWP поддерживается как для исходных циклов со 
счетчиком, использующих команду br.cloop, так и для циклов while. Для 
циклов со счетчиком на первой стадии цикла должен применяться PR16, а 
для циклов while - любой PR-регистр из области вращения. Предикаты 
последующих стадий должны иметь более высокие номера PR. Инициализация 
предикативных стадий возложена на программиста.
</p><p alin="justify">Как мы увидим, применение PR-регистров, вращаемых 
регистров GR и FR и специальных SWP-команд перехода позволяет не 
увеличивать размер кода SWP-цикла, что характерно для оптимизации циклов
 в RISC-процессорах. Вращение на одну регистрную позицию вышеупомянутых 
регистров осуществляется аппаратно при выполнении SWP-команды перехода 
(br.ctop - для циклов со счетчиком при расположении команды перехода в 
конце тела цикла).
</p><p>
Таблица 2. Прокрутка SWP-цикла (Пример 3(в)) по тактам<table align="center" border="1" cellpadding="3" cellspacing="0">
<thead></thead>
<tbody><tr align="center">
<td><b>Номер такта</b></td>
<td colspan="4"><b>Команды и порты</b></td>
<td colspan="6"><b>Значения регистров перед br.ctop</b></td></tr>
<tr align="center"><td>&nbsp;</td>
<td><b>M</b></td>
<td><b>I</b></td>
<td><b>M</b></td>
<td><b>B</b></td>
<td><b>p16</b></td>
<td><b>p17</b></td>
<td><b>p18</b></td>
<td><b>p19</b></td>
<td><b>LC</b></td>
<td><b>EC</b></td>
</tr>
<tr align="center">
<td><b>1</b></td>
<td>ld8</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>br.ctop</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>99</td>
<td>4</td>
</tr>
<tr align="center">
<td><b>2</b></td>
<td>ld8</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>br.ctop</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>0</td>
<td>98</td>
<td>4</td>
</tr>
<tr align="center">
<td><b>3</b></td>
<td>ld8</td>
<td>add</td>
<td>&nbsp;</td>
<td>br.ctop</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>97</td>
<td>4</td>
</tr>
<tr align="center">
<td><b>4</b></td>
<td>ld8</td>
<td>add</td>
<td>st8</td>
<td>br.ctop</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>96</td>
<td>4</td>
</tr>
<tr align="center">
<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>	<td>...</td>
</tr>
<tr align="center">
<td><b>99</b></td>
<td>ld8</td>
<td>add</td>
<td>st8</td>
<td>br.ctop</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>4</td>
</tr>
<tr align="center">
<td><b>100</b></td>
<td>&nbsp;</td>
<td>add</td>
<td>st8</td>
<td>br.ctop</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>3</td>
</tr>
<tr align="center">
<td><b>101</b></td>
<td>&nbsp;</td>
<td>add</td>
<td>st8</td>
<td>br.ctop</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>2</td>
</tr>
<tr align="center">
<td><b>102</b></td>
<td>&nbsp;</td>	<td>&nbsp;</td>
<td>st8</td>
<td>br.ctop</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr align="center">
<td><b>...</b></td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>&nbsp;</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr></tbody></table>
</p><p alin="justify">При выполнении такой команды вращение регистров 
осуществляется путем их переименования благодаря уменьшению на 1 базовых
 значений в CFM - соответственно полей CFM.rrb.gr, CFM.rrb.fr и 
CFM.rrb.pr. Вообще изменение полей rrb, приводящее к переименованию 
регистров, происходит при выполнении команд очистки rrb (clrrrb, 
clrrrb.pr) и переходов типа вызова процедур/возврата (br.call/br.ret) и 
SWP-переходов, в том числе br.ctop. Файлы вращаемых регистров с точки 
зрения их переименования зациклены: регистр с максимальным номером после
 вращения переходит в регистр с минимальным номером из области вращения.
 Так, PR63 после вращения становится PR16.
</p><p alin="justify">Рассмотрим теперь, как организовывается работа 
SWP-цикла со счетчиком. При этом используется регистр LC, в который 
помещается значение N-1 (N - число итераций цикла), и регистр ЕС, куда 
надо поместить число стадий в теле цикла. Пока LC больше 0, br.ctop 
продолжает выполнение цикла, уменьшая LC на 1 и вращая регистры на 1 
путем уменьшения rrb. Команда br.ctop, принявшая решение о продолжении 
цикла, устанавливает в 1 регистр PR63, который после вращения становится
 PR16.
</p><p alin="justify">Когда LC становится равным 0, начинается фаза 
эпилога. В ней br.ctop будет продолжать цикл, уменьшая EC на 1 - до тех 
пор, пока EC не обнулится. Тогда br.ctop завершит цикл, передав 
управление на следующую команду.
</p><p alin="justify">Проиллюстрируем сказанное выше на конкретном 
примере SWP-цикла (в примере 3 мы незначительно модернизировали 
соответствующий пример из [1]).
</p><p alin="justify">Предположим, что все целые величины - 64-разрядные.
</p><p alin="justify">Предполагается, что в регистре GR5 лежит адрес 
начала массива IND, а в GR6 - адрес начала JND; K загружена в GR7. 
Первая команда ld8 загружает 8 байт из адреса, указанного в GR5, в GR8. В
 конце ее выполнения к GR5 прибавляется 8. Команда add складывает GR8 и 
GR7, помещая результат в GR9. Команда st8 записывает содержимое этого 
регистра в память, адрес которой находится в GR6, и в конце выполнения 
увеличивает его на 8.
</p><p alin="justify">В [1] соответствующий пример относится к 
32-разрядным целым и предполагается, что команда ld4 занимает два такта.
 Это типично для микропроцессоров, и мы предполагаем, что ld8 также 
занимает два такта. Можно предположить, что в теле цикла (без br.cloop) 
остальные команды занимают один такт, тогда это тело состоит из четырех 
стадий, вторая из которых - пустая (ожидание завершения ld8 на втором 
такте).
</p><p alin="justify">Вследствие наличия большого числа ФИУ и 
соответствующих портов, команды цикла, представленные в примере 3, могли
 бы в принципе выполняться одновременно, если бы они работали с разными 
регистрами (т.е. не было бы взаимозависимости). Это хорошо видно из 
табл. 2, в которой нетрудно разглядеть аналогии с заполнением аппаратных
 конвейеров.
</p><p alin="justify">На тактах 1-3 происходит заполнение конвейера 
(пролог), такты 4-5 относятся к фазе ядра, такты 6-8 отвечают эпилогу. 
Если бы не было взаимозависимости, команды ld8, add и st8 могли бы 
работать параллельно в фазе ядра (предполагается, что имеется два порта 
памяти). Скажем, когда add начинает работу, ld8 могла бы начать новую 
загрузку, но уже в другой GR-регистр. В суперскалярных RISC-процессорах 
для достижения подобных целей приходится создавать отдельные коды для 
пролога и эпилога, раскручивать циклы, что приводит к увеличению длины 
кода.
</p><p alin="justify">В IA-64 эти проблемы решены элегантно и 
эффективно. Нет необходимости вручную заниматься переименованием 
регистров, чтобы избавиться от взаимозависимости - для этого есть 
вращение регистров. Не нужно писать пролог и эпилог - все 
автоматизировано за счет применения PR-регистров и SWP-команд.
</p><p alin="justify">SWP-аналог примера 3 использует команду br.ctop. 
Соответственно первой стадии (команда ld8) выделяется PR16, второй (add)
 - PR18, четвертой (st8) - PR19. Вместо статических GR7-9 мы будем 
использовать вращаемые регистры, начиная с GR32. Перед началом 
выполнения цикла в LC загружается значение N-1 (99), а в EC - 4 (на 1 
больше числа стадий эпилога). Кроме того, нужно установить вращаемые 
PR-регистры, что делается сразу для всех предикативных регистров 
командой mov pr.rot.
</p><p alin="justify">Вследствие вращения регистров величина JND(I), 
загружаемая в GR32, двумя тактами позднее (по завершению ld8) уже 
оказывается в GR34. Аналогично, IND(I)+K, помещаемая в GR35, по 
завершению команды add (один такт) окажется в GR36. Эти "измененные" 
номера регистров должны кодироваться в программе.
</p><p alin="justify">Приведем, наконец, завершающий пример - цикл, 
рассчитывающий скалярное произведение векторов [1]. В примере 4 адреса 
начал A и B лежат в GR5 и GR6; предполагается, что ldfd используют два 
порта памяти, а времена выполнения ldfd и fma составляют 9 и 5 тактов 
соответственно (в [1] предполагается 9 тактов на ldfs). В команде 
br.ctop.sptk последняя компонента мнемокода - статическая "подсказка": 
статическое предсказание, что переход будет осуществлен.
</p><p alin="justify">В цикле вычисляются пять частичных сумм: 
A(1)*B(1)+A(6)*B(6)+..., A(2)*B(2)+ A(7)*B(7)+..., ..., 
A(5)*B(5)+A(10)*B(10)+... , и все эти суммирования идут с шагом 5. В 
этом можно убедиться, если прокрутить вручную первые итерации цикла и 
учесть, что каждый раз при br.ctop происходит переименование регистров 
FR (как и PR). Поэтому A(I) попадает в f50 при ldfd, и девять итераций 
(девять тактов) спустя будет в f59, а B(I) из f60 окажется в f69, и т.д.
</p><p alin="justify">В примере 4 опущено обнуление регистров частичных 
сумм и другие подобные "мелочи" (до начала цикла). По завершению цикла 
пять частичных сумм складываются, и результирующая сумма S оказывается в
 f10. Если проанализировать этот исходно простой пример, отследив, 
почему используются те или иные номера регистров, то станет ясно, что 
SWP-оптимизация требует от программиста большой тщательности и знания 
времен выполнения команд. Более того, такая привязка означает, что если в
 процессорах IA-64 нового поколения изменятся времена выполнения команд 
(например, при переходе от Merced к McKinley), то оптимизированную 
программу для достижения высокой производительности необходимо 
переделать. Однако компактность и эффективность оптимизированных кодов 
несомненны.

</p><p><b>IA-64 в первом приближении</b>
</p><p alin="justify">Некоторые приведенные в статье данные о времени 
выполнения команд (ldfd/ldfs, fma), основанные на примерах в [1], могут 
оказаться иными в конкретной реализации Itanium. Однако если 
предположить, что оценки эти окажутся близкими к реальности, становится 
понятным высказывавшееся мнение о том, что Itanium будет эффективно 
работать с векторизуемыми кодами. Действительно, в этом случае большие 
задержки команд типа ldfs или fma будут исключены благодаря 
использованию SWP.
</p><p alin="justify">В рамках одной журнальной статьи трудно дать 
полное введение в такую сложную архитектуру, как IA-64. Автор же 
постарался представить наиболее важные отличительные особенности IA-64.

</p><h4>Об авторe</h4>
<p align="justify"><i><b>Михаил Кузьминский</b> - старший научный сотрудник Центра компьютерного обеспечения химических исследований РАН. С ним можно связаться по телефону: </i><br>
<b>(095) 135-6388.</b>

</p><h4>Литература</h4>
<ol>
<li>IA-64 Application Developer's Architecture Guide, Intel Corp., 1999.</li>
<li>IA-64 Application Instruction Set Architecture Guide, Rev.1.0, Intel Corp., HP, 1999.</li>
<li>М. Кузьминский, "Открытые системы", 1999, N 5-6, стр.8.</li>
<li>SGI Power Challenge. Technical Report. SGI, 1996</li>
</ol>
<p>&nbsp;
<!-- end -->
</p></div>


<center><table><tbody><tr><td><a href="http://vip.gfi.ru/?source=banner:cit_vip" rel="nofollow" target="_blank"><img class="llkbcbkdmmxssvtbozzr" src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/gfi_110x52.png" border="0" height="52" width="110"></a></td><td><a href="http://vip.gfi.ru/?source=banner:cit_vip" rel="nofollow" target="_blank" style="font-size:15px;font-family:arial,sans-serif;font-weight:bold;text-decoration:none;color:black"><nobr>Зарегистрируйте номер 007-101-303</nobr><br><nobr>на сайте VIP.GFI.RU и получите</nobr><br><nobr>наши продукты <span style="font-size:20px;color:red">БЕСПЛАТНО</span></nobr></a></td></tr></tbody></table>
</center>

<center>


</center>

</td>


<td>

<table align="right" border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr>
<td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" border="0" height="1" width="1"></td>
<td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" border="0" height="1" width="2"></td>
<td>

<table border="0" cellpadding="0" cellspacing="0">

<tbody><tr><td align="center"><!--  AdRiver code START. Type:240x400 Site: citforum PZ: 0 BN: 1 -->
<script language="javascript" type="text/javascript"><!--
var RndNum4NoCash = Math.round(Math.random() * 1000000000);
var ar_Tail='unknown'; if (document.referrer) ar_Tail = escape(document.referrer);
document.write(
'<iframe src="http://ad.adriver.ru/cgi-bin/erle.cgi?'
+ 'sid=137295&bn=1&target=blank&bt=22&pz=0&rnd=' + RndNum4NoCash + '&tail256=' + ar_Tail
+ '" frameborder=0 vspace=0 hspace=0 width=240 height=400 marginwidth=0'
+ ' marginheight=0 scrolling=no></iframe>');
//--></script><iframe class="llkbcbkdmmxssvtbozzr" src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/erle_002.htm" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" height="400" width="240"></iframe>
<noscript>
<a href="http://ad.adriver.ru/cgi-bin/click.cgi?sid=137295&bn=1&bt=22&pz=0&rnd=1132854728" target=_blank>
<img src="http://ad.adriver.ru/cgi-bin/rle.cgi?sid=137295&bn=1&bt=22&pz=0&rnd=1132854728" alt="-AdRiver-" border=0 width=240 height=400></a>
</noscript>

<!--  AdRiver code END  --></td></tr>



<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr>
<tr><td bgcolor="#ffffff">
<font size="2">
<p><b>Новости мира IT:</b>
</p><ul class="column">
<!--<b><a target=_blank href=http://citcity.ru/20070/>4&#x2013;5 декабря пройдёт &#xab;Платформа 2009&#xbb;</a></b>
<hr>-->

<li>13.05 - <a href="http://citforum.ru/news/31994/">Oracle vs Google: Альтернативная реализация API признана нарушением авторского права</a></li><li>13.05 - <a href="http://citforum.ru/news/31993/">В ядре Linux обнаружена уязвимость, позволяющая получить привилегии пользователя root</a></li><li>12.05 - <a href="http://citforum.ru/news/31992/">Серверная операционная система CoreOS перешла на стадию бета-тестирования </a></li><li>12.05 - <a href="http://citforum.ru/news/31990/">Глава Samsung попал в реанимацию из-за проблем с дыханием</a></li><li>12.05 - <a href="http://citforum.ru/news/31991/">Google, Apple и Microsoft будут платить НДС в России</a></li><li>12.05 - <a href="http://citforum.ru/news/31984/">Samsung сменил главу мобильного дизайна из-за провала Galaxy S5</a></li><li>12.05 - <a href="http://citforum.ru/news/31986/">Тайваньские СМИ пообещали выход iPhone 6 на месяц раньше</a></li><li>12.05 - <a href="http://citforum.ru/news/31989/">В ООН пройдет дискуссия об использовании роботов-убийц</a></li><li>12.05 - <a href="http://citforum.ru/news/31988/">Планы Apple купить Beats Electronics вызывают недоумение в соцсетях</a></li><li>12.05 - <a href="http://citforum.ru/news/31987/">Наземные станции ГЛОНАСС могут появиться в Никарагуа и Вьетнаме</a></li><li>12.05 - <a href="http://citforum.ru/news/31985/">Продажи мобильников на Украине упали на треть</a></li><li>08.05 - <a href="http://citforum.ru/news/31983/">Google упростила сохранение карты для использования офлайн</a></li><li>08.05 - <a href="http://citforum.ru/news/31982/">Российские блогеры остались без призов The BOBs</a></li><li>08.05 - <a href="http://citforum.ru/news/31981/">Intel представил сокращённый вариант сетевого стека для Linux</a></li><li>08.05 - <a href="http://citforum.ru/news/31980/">Продемонстрирован первый серверный чип AMD на базе архитектуры ARM</a></li><li>08.05 - <a href="http://citforum.ru/news/31979/">Беспилотные автомобили Volvo начали ездить по улицам Швеции</a></li><li>08.05 - <a href="http://citforum.ru/news/31978/">Минкомсвязь предлагает изменить порядок пропуска трафика в телефонных сетях и сетях передачи данных</a></li><li>08.05 - <a href="http://citforum.ru/news/31977/">HP инвестирует более $1 млрд в облако</a></li><li>08.05 - <a href="http://citforum.ru/news/31976/">Процессоры Intel Core Skylake выйдут в 2015 году</a></li><li>08.05 - <a href="http://citforum.ru/news/31975/">Nokia может купить Alcatel-Lucent</a>

</li></ul>
</font><p><font size="2"><a target="_blank" href="http://citforum.ru/news/"><b>Архив новостей</b></a>
</font>
</p><p align="right"><a href="http://citforum.ru/news/rss/news.xml"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/xml_rss.gif" border="0" height="14" width="36"></a>
</p></td></tr>


<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr>
<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td style="padding-left: 5px; min-width: 240px"><p><b>Последние комментарии:</b>	</p><div class="comments_menu">
		<a href="http://citforum.ru/news/31989/#comments">В ООН пройдет дискуссия об использовании роботов-убийц</a>&nbsp;(1)<br>
		<div class="comments_menu_date">12 Май, 07:40		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31975/#comments">Nokia может купить Alcatel-Lucent</a>&nbsp;(1)<br>
		<div class="comments_menu_date">11 Май, 21:37		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31140/#comments">Доля Android-смартфонов в III кв 2013 г в мире достигла 81%</a>&nbsp;(27)<br>
		<div class="comments_menu_date">11 Май, 21:33		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/28648/#comments">Неудачные инвестиции обойдутся Microsoft в 6,2 миллиарда долларов</a>&nbsp;(281)<br>
		<div class="comments_menu_date">11 Май, 21:03		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31973/#comments">Путин подписал закон, приравнивающий блогеров к СМИ</a>&nbsp;(8)<br>
		<div class="comments_menu_date">11 Май, 20:59		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31949/#comments">Вышел дистрибутив ROSA Desktop Fresh R3</a>&nbsp;(20)<br>
		<div class="comments_menu_date">11 Май, 20:58		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31951/#comments">Apple патентует улучшенную клавиатуру Артемия Лебедева</a>&nbsp;(7)<br>
		<div class="comments_menu_date">11 Май, 20:54		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/29386/#comments">Android заняла более 70 процентов рынка смартфонов</a>&nbsp;(110)<br>
		<div class="comments_menu_date">11 Май, 20:52		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31982/#comments">Российские блогеры остались без призов The BOBs</a>&nbsp;(2)<br>
		<div class="comments_menu_date">11 Май, 20:50		</div>
	</div>	<div class="comments_menu">
		<a href="http://citforum.ru/news/31922/#comments">Gmail и Skype могут быть запрещены в России</a>&nbsp;(29)<br>
		<div class="comments_menu_date">11 Май, 20:48		</div>
	</div></td></tr>

<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr>
<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td><div id="cse" style="width: 100%;"><div class="gsc-control-cse gsc-control-cse-ru"><div dir="ltr" class="gsc-control-wrapper-cse"><form accept-charset="utf-8" class="gsc-search-box"><table class="gsc-search-box" cellpadding="0" cellspacing="0"><tbody><tr><td class="gsc-input"><input style="outline: medium none; background: url(&quot;http://www.google.com/cse/intl/ru/images/google_custom_search_watermark.gif&quot;) no-repeat scroll left center rgb(255, 255, 255);" spellcheck="false" dir="ltr" id="gsc-i-id1" title="поиск" name="search" class=" gsc-input" size="10" autocomplete="off" type="text"></td><td class="gsc-search-button"><input title="поиск" class="gsc-search-button" value="Поиск" type="button"></td><td class="gsc-clear-button"><div title="удалить результаты" class="gsc-clear-button">&nbsp;</div></td></tr></tbody></table><table class="gsc-branding" cellpadding="0" cellspacing="0"><tbody><tr><td class="gsc-branding-user-defined"></td><td class="gsc-branding-text"><div class="gsc-branding-text">технология</div></td><td class="gsc-branding-img"><img class="gsc-branding-img" src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/small-logo.png"></td></tr></tbody></table></form><div class="gsc-results-wrapper-nooverlay"><div class="gsc-tabsAreaInvisible"><div class="gsc-tabHeader gsc-inline-block gsc-tabhActive">Пользовательский поиск</div><span class="gs-spacer"> </span></div><div class="gsc-tabsAreaInvisible"></div><div class="gsc-above-wrapper-area-invisible"><table class="gsc-above-wrapper-area-container" cellpadding="0" cellspacing="0"><tbody><tr><td class="gsc-result-info-container"><div class="gsc-result-info-invisible"></div></td></tr></tbody></table></div><div class="gsc-adBlockInvisible"></div><div class="gsc-wrapper"><div class="gsc-adBlockInvisible"></div><div class="gsc-resultsbox-invisible"><div class="gsc-resultsRoot gsc-tabData gsc-tabdActive"><table class="gsc-resultsHeader" cellpadding="0" cellspacing="0"><tbody><tr><td class="gsc-twiddleRegionCell"><div class="gsc-twiddle"><div class="gsc-title">Интернет</div></div><div class="gsc-stats"></div><div class="gsc-results-selector gsc-all-results-active"><div title="показать один результат" class="gsc-result-selector gsc-one-result">&nbsp;</div><div title="показать другие результаты" class="gsc-result-selector gsc-more-results">&nbsp;</div><div title="показать все результаты" class="gsc-result-selector gsc-all-results">&nbsp;</div></div></td><td class="gsc-configLabelCell"></td></tr></tbody></table><div><div class="gsc-expansionArea"></div></div></div></div></div></div></div></div></div>
<script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/jsapi" type="text/javascript"></script>
<script type="text/javascript"> 
  google.load('search', '1', {language : 'ru'});
  google.setOnLoadCallback(function() {
    var customSearchControl = new google.search.CustomSearchControl('018117224161927867877:xbac02ystjy');
    customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
    customSearchControl.draw('cse');
  }, true);
</script><script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/a" type="text/javascript"></script><link href="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/defaultru.css" type="text/css" rel="stylesheet"><script src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/defaultru.js" type="text/javascript"></script>
<link rel="stylesheet" href="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/default.css" type="text/css">
</td></tr>

<tr><td align="center"><!-- Soloway 240x400 code START-->
<script language="javascript" type="text/javascript"><!--
if(typeof(ar_cn)=="undefined") var ar_cn=1;
var ar_Tail=document.referrer ? escape(document.referrer) : 'unknown';
var ar_link="http://ad.adriver.ru/cgi-bin/erle.cgi?sid=126751&bt=49&target=blank&tail256=" + ar_Tail;
document.write('<div style="visibility:hidden;height:0px;"><iframe id="ar_container_'+ar_cn+'" width=1 height=1 marginwidth=0 marginheight=0 scrolling=no frameborder=0><\/iframe><\/div><div id="ad_ph_'+ar_cn+'"><\/div>');
function ar_getDoc(t,n,l){var doc;if(t<100){if(document.all && !window.opera){doc = window.frames['ar_container_'+n].document}
else if(document.getElementById){doc=document.getElementById('ar_container_'+n).contentDocument}
if(!doc){setTimeout('ar_getDoc('+(++t)+','+n+',"'+l+'")', 100)}else {var RndNum4NoCash = Math.round(Math.random() * 1000000000);
doc.write ('<sc'+'ript language="JavaScript" type="text/javascript">var ar_bnum='+n+';<\/sc'+'ript>');
doc.write ('<sc'+'ript language="JavaScript" type="text/javascript" src="'+l+'&rnd='+RndNum4NoCash+'"><\/sc'+'ript>');}}}
(function(num,link){function addEvent(e,t,f){if(e.addEventListener)e.addEventListener(t,f,false);else if(e.attachEvent)e.attachEvent('on'+t,f)}
function removeEvent(e,t,f){if(e.removeEventListener)e.removeEventListener(t,f,false);else if(e.detachEvent)e.detachEvent('on'+t,f)}
var BannerLoader={top:0,height:400,cm:document.compatMode=="CSS1Compat",
scroll:function(){var ch=self.innerHeight||this.cm&&document.documentElement.clientHeight||document.body.clientHeight;
var st=self.pageYOffset||this.cm&&document.documentElement.scrollTop||document.body.scrollTop;
var sh=self.scrollHeight||this.cm&&document.documentElement.scrollHeight||document.body.scrollHeight;
if((st-this.top<=this.height*0.2&&st+ch-this.top>=this.height*0.8)||(sh-this.top<=this.height*0.8&&(sh-st-ch<1||sh<ch))){
removeEvent(window,'scroll',this.sfunc);ar_getDoc(0,num,link)}},
sfunc: function(){BannerLoader.scroll()},init:function(){var t=this,obj=document.getElementById('ad_ph_'+num);
if(obj){while(obj.offsetParent){t.top += obj.offsetTop; obj = obj.offsetParent}
addEvent(window,'scroll',this.sfunc);t.scroll()}}};addEvent(window, 'load', function(){BannerLoader.init()})})(ar_cn++,ar_link);
//--></script><div style="visibility:hidden;height:0px;"><iframe id="ar_container_1" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" height="1" width="1"></iframe></div><div id="ad_ph_1"></div>
<!-- Soloway 240x400 code END -->
</td></tr>
<tr><td style="padding-left:5px;">





</td></tr>

</tbody></table>

</td>
<td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" border="0" height="1" width="2"></td>
<td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" border="0" height="1" width="1"></td>
</tr></tbody></table>

</td>
 <!--no_right-->

</tr>
</tbody></table>
</td>

</tr></tbody></table>

<p>
<table border="0" cellpadding="0" cellspacing="0" width="100%">
<tbody><tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="931"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr>
<tr><td bgcolor="#008080">

<table border="0" cellpadding="3" cellspacing="1" width="100%">
<tbody><tr>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/consulting/">IT-консалтинг</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/SE/">Software Engineering</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/programming/">Программирование</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/database/">СУБД</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/security/">Безопасность</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/internet/">Internet</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/nets/">Сети</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/operating_systems/">Операционные системы</a></font></td>
<td align="center" bgcolor="#F4F9F3"><font size="-1"><a class="head" href="http://citforum.ru/hardware/">Hardware</a></font></td>
<!--
<td bgcolor=#F4F9F3 align=center><font size=-1><a class=head href=/faq/>FAQ (ЧаВО)</a></font></td>
<td bgcolor=#F4F9F3 align=center><font size=-1><a class=head href=/howto/>HOWTO</a></font></td>
--> 
</tr>
</tbody></table>

</td></tr>
</tbody></table>

</p><p>

<table width="100%">
<tbody><tr><td>
<a href="http://citforum.ru/about/"><font size="2">Информация для рекламодателей</font></a> 
</td><td><font size="2">PR-акции, размещение рекламы — <a href="mailto:adv@citforum.ru">adv@citforum.ru</a>,
<br>тел.&nbsp;+7&nbsp;495&nbsp;6608306, ICQ&nbsp;232284597</font>
</td><td align="right"><font size="2">Пресс-релизы — <a href="mailto:pr@citforum.ru">pr@citforum.ru</a></font>
</td></tr></tbody></table>


<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="5" width="1"></td></tr>
<tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr>
<tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr></tbody></table>

<table border="0" cellpadding="4" cellspacing="0" width="100%"><tbody><tr>
<td><font size="2">
<a href="http://www.citforum.ru/feedback.php?page=/hardware/articles/ia64.shtml&amp;server=citforum.ru">Послать комментарий</a><br>
<a href="http://citforum.ru/how.shtml">Информация для авторов</a>

</font></td>

<td><a href="http://top100.rambler.ru/cgi-bin/stats_top100.cgi?13078"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/banner-88x31-rambler-darkblue2.gif" alt="Rambler's Top100" border="0" height="31" width="88"></a></td>
<td><!--TopList LOGO--><a target="_top" href="http://top.list.ru/jump?from=26978"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/counter_002.gif" alt="TopList" border="0" height="31" width="88"></a><!--TopList LOGO--></td>
<td>
<!--LiveInternet logo--><a href="http://www.liveinternet.ru/click" target="_blank"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/logo.gif" alt="liveinternet.ru: показано число просмотров за 24 часа, посетителей за 24 часа и за сегодня" border="0" height="31" width="88"></a><!--/LiveInternet-->
</td>

<td align="right" valign="bottom"><font face="Arial, sans-serif" size="1">This Web server launched on February 24, 1997<br>
Copyright © 1997-2000 CIT, © 2001-2009 <a href="http://citforum.ru/info.shtml">CIT Forum</a></font></td>
</tr></tbody></table>

<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td bgcolor="#daecd7"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="3" width="1"></td></tr><tr><td bgcolor="#008080"><img src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/1x1.gif" alt="" border="0" height="1" width="1"></td></tr></tbody></table>
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tbody><tr><td align="center"><font face="Arial, sans-serif" size="1"><b>Внимание!</b>
 Любой из материалов, опубликованных на этом сервере, не может быть  
воспроизведен в какой бы то ни было форме и какими бы то ни было 
средствами без письменного разрешения владельцев авторских прав. <a href="http://citforum.ru/copyright.shtml">Подробнее...</a></font></td></tr></tbody></table>


</p><hr>
<style><!--
.d {color:grey;font-size:10px}
.d a {text-decoration:none}
--></style>
<table class="d" width="100%">
<tbody><tr><td>





</td></tr>
</tbody></table>



</td></tr></tbody></table></center>


<script type="text/javascript"><!--
var _ga1_channel='9117';
(function() {
    var s = document.createElement('script'); s.type = 'text/javascript'; s.charset = 'utf-8'; s.async = true; s.src = 'http://files.goodadvert.ru/ga_1.js';
    var o = document.getElementsByTagName('script')[0]; o.parentNode.insertBefore(s, o);
})();
// -->
</script>

<!-- GoodADVERT (SMART SCREEN) for http://citforum.ru/ -->
<script type="text/javascript"><!--
var _ga3_channel='9114';
(function() {
    var s = document.createElement('script'); s.type = 'text/javascript'; s.charset = 'utf-8'; s.async = true; s.src = 'http://files.goodadvert.ru/ga_3.js';
    var o = document.getElementsByTagName('script')[0]; o.parentNode.insertBefore(s, o);
})();
// -->
</script>
<!-- GoodADVERT -->

<!-- AdGravity Javascript code START-->
<script language="javascript" type="text/javascript"><!--
var RndNum4NoCash = Math.round(Math.random() * 1000000000);
var ar_Tail='unknown'; if (document.referrer) ar_Tail = escape(document.referrer);
document.write('<sc' + 'ript language="JavaScript" src="http://ad.adriver.ru/cgi-bin/erle.cgi?sid=126751&bt=16&target=blank&tail256="' + ar_Tail + '"></sc' + 'ript>');
//--></script><script language="JavaScript" src="%D0%9A%D1%80%D0%B0%D1%82%D0%BA%D0%B8%D0%B9%20%D0%BE%D0%B1%D0%B7%D0%BE%D1%80%20IA-64_files/erle.js" http%3a="" www.google.ru="" url%3fsa%3dt%26rct%3dj%26q%3d%26esrc%3ds%26source%3dweb%26cd%3d3%26ved%3d0cd0qfjac%26url%3dhttp%253a%252f%252fcitforum.ru%252fhardware%252farticles%252fia64.shtml%26ei%3dmlvxu-uhjkmsyapmtycabq%26usg%3dafqjcnfysm53keu32dlwyhpm7725mddi4q%26sig2%3d8aystfwcap34dlbhtjqp0g%26bvm%3dbv.66330100%2cd.bgq%26cad%3drjt"=""></script>
<!-- AdGravity Javascript code END -->




<table class="gstl_50 gssb_c" style="width: 206px; display: none; top: 1478px; left: 824px; position: absolute;" cellpadding="0" cellspacing="0"><tbody><tr><td class="gssb_f"></td><td style="width: 100%;" class="gssb_e"></td></tr></tbody></table></body></html>