<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
 <HTML><HEAD><TITLE>Процессор Pentium 4 | Микроархитектура процессоров Pentium 4</TITLE>
<META content="text/html; charset=windows-1251" http-equiv=Content-Type>
     <body bgcolor=#f2f2f2 text="Black" background="">
	               <H3 align=center>Микроархитектура процессоров Pentium 4</H3>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp; Основные особенности процессора 
      Pentium 4 связаны с его микроархитектурой. <I>Микроархитектура 
      процессора</I> определяет реализацию его внутренней структуры, принципы 
      выполнения поступающих команд, способы размещения и обработки данных. Как 
      анонсировала компания Intel, новая микроархитектура процессора Pentium 4, 
      получившая название NetBurst (пакетно-сетевая), ориентирована на 
      эффективную работу с Интернет-приложениями. Необходимо отметить, что в 
      микроархитектуре NetBurst реализованы многие принципы, использованные в 
      предыдущей модели Pentium III (микроархитектура P6 [2]). Характерными 
      чертами этой микроархитектуры являются:<BR>
      <UL>
        <LI>гарвардская структура с разделением потоков команд и данных; 
        <LI>суперскалярная архитектура, обеспечивающая одновременное выполнение 
        нескольких команд в параллельно работающих исполнительных устройствах; 
        <LI>динамическое изменение последовательности команд (выполнение команд 
        с опережением — спекулятивное выполнение); 
        <LI>конвейерное исполнение команд; 
        <LI>предсказание направления ветвлений. </LI></UL>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Практическая реализация данных 
      принципов в структуре процессора Pentium 4 имеет ряд существенных 
      особенностей (рис. 4).<BR>
      <P align=center><IMG alt="Общая структура Pentium 4" border=0 height=531 
      src="shag3.gif" 
      width=387> 
      <H4 align=center>Рис. 4. Общая структура Pentium 4</H4>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Гарвардская внутренняя структура 
реализуется путём разделения потоков команд и данных, поступающих от 
системной шины через блок внешнего интерфейса и размещённую на кристалле 
процессора общую кэш-память 2-го уровня (L2- Advanced Transfer Cache) 
ёмкостью 256 Кбайт. Такое размещение позволяет сократить время выборки 
команд и данных по сравнению с Pentuim III, где эта кэш-память располагается 
на отдельном кристалле, смонтированном в общем корпусе (картридже) с 
процессором. Так как Pentium 4 рассчитан на обработку потоковых данных, 
скорость работы L2-кеша для него является одним из ключевых моментов. 
Поэтому, Intel увеличил пропускную способность кеша второго уровня в 
Pentium 4 в два раза. Это усовершенствование было сделано благодаря передаче 
данных из L2-кеша на каждый процессорный такт, в то время, как данные 
из L2-кеша Pentium III передаются только на каждый второй такт. Таким образом, 
пропускная способность L2-кеша Pentium 4, работающего, например, с частотой 
1.4 ГГц имеет теперь внушительную величину 44.8 Мбайт/с. Для сравнения - 
пропускная способность Advanced Transfer Cache у Pentium III 1 ГГц составляет 
16 Гбайт/с. Также как и в Pentium III, L2 кэш имеет восемь областей ассоциативности 
и строки длиной 128 байт. Однако, в отличие от Pentium III, каждая строка 
может быть изъята не целиком, а по 64-байтовым половинкам.
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Блок внешнего интерфейса 
      реализует обмен пpоцессоpа с системной шиной, к которой подключается 
      память, контроллеры ввода/вывода и другие активные устройства системы. 
      Обмен по системной шине осуществляется с помощью 64-разрядной 
      двунаправленной шины данных, 41-разрядной шины адреса (33 адресных линии 
      А35-3 и 8 линий выбора байтов BE7-0#), обеспечивающей адресацию до 64 
      Гбайт внешней памяти.<BR>
      <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;
Дешифратор команд работает вместе с памятью микропрограмм, формируя 
последовательность микрокоманд, обеспечивающих выполнение поступивших команд.
 Декодированные команды загружаются в кэш-память микрокоманд, откуда они 
 выбираются для исполнения. Вместо обычного L1 кеша, который в Pentium III
  был разделен на область инструкций и область данных в Pentium 4 применен новый 
подход. Инструкции в L1 кэше не сохраняются, он предназначен теперь только 
для данных. Для кэширования инструкций теперь используется <I>Trace Cache</I>, однако 
по сравнению с обычным L1-кешем он имеет много преимуществ, направленных опять 
же на минимизацию простоев процессора при выполнении неправильных предсказаний 
переходов. Первое, и основное - в <I>Trace Cache</I> сохраняются уже декодированные 
инструкции. Это значит, что в нем хранятся не классические x86 инструкции, 
а так называемые микрокоманды, более простые операции которыми непосредственно 
оперирует процессорное ядро. Сохранение в <I>Trace Cache</I> микроопераций позволяет 
избежать повторного декодирования x86 инструкций при повторном выполнении того 
же участка программы или при неправильном предсказании переходов. Итак после 
заполнения <I>Trace Cache</I> практически любая команда будет храниться в ней в 
декодированом виде. Поэтому при поступлении очередной команды блок трассировки 
выбирает из этой кэш-памяти необходимые микрокоманды, обеспечивающие её выполнение.
  Второе преимущество <I>Trace Cache</I> заключается в том, что микрооперации в нем 
сохраняются именно в том порядке, в каком они выполняются. Если в потоке 
команд оказывается команда условного перехода (ветвления программы), 
то включается механизм предсказания ветвления, который формирует адрес 
следующей выбираемой команды до того, как будет определено условие выполнения 
перехода. Вероятность того, что переходы предсказываются неправильно, 
достаточно мала для того, чтобы отказаться от очевидного выигрыша, получаемого 
путем отказа от повторных декодирований и предсказаний переходов. Кэш-память 
может хранить до 12000 микрокоманд.     После формирования потоков микрокоманд
 производится выделение регистров, необходимых для выполнения декодированных 
 команд. Эта процедура реализуется блоком распределения регистров, который 
 выделяет для каждого указанного в команде логического регистра (регистра 
 целочисленных операндов EAX, ECX и других, регистра операндов с плавающей точкой 
 ST0-ST7 или регистра блоков MMX, SSE, рис. 2) один из 128 физических регистров, 
 входящих в состав блоков регистров замещения (БРЗ).     Эта процедура позволяет 
 выполнять команды, использующие одни и те же логические регистры, одновременно 
 или с изменением их последовательности.  Выбранные микрокоманды размещаются в очереди 
 микрокоманд. В ней содержатся микрокоманды, реализующие выполнение 126 поступивших
  и декодированных команд, которые затем направляются в исполнительные устройства 
  по мере готовности операндов. Отметим, что в процессорах Pentium III в очереди 
  находятся микрокоманды для 40 поступивших команд. Значительное увеличение числа 
  команд, стоящих в очереди, позволяет более эффективно организовать поток их 
  исполнения, изменяя последовательность выполнения команд и выделяя команды, которые 
  могут выполняться параллельно. Эти функции реализует блок распределения микрокоманд. 
  Он выбирает микрокоманды из очереди не в порядке их поступления, а по мере готовности 
  соответствующих операндов и исполнительных устройств. В результате команды, 
  поступившие позже, могут быть выполнены до ранее выбранных команд. При этом реализуется 
  одновременное выполнение нескольких микрокоманд (команд) в параллельно 
  работающих исполнительных устройствах. Таким образом естественный порядок 
  следования команд нарушается, чтобы обеспечить более полную загрузку 
  параллельно включенных исполнительных устройств и повысить производительность процессора.<BR>
<P align=justify>&nbsp;&nbsp;&nbsp;&nbsp; Суперскалярная архитектура реализуется
 путём организации исполнительного ядра процессора в виде ряда параллельно работающих 
 блоков. Арифметико-логические блоки ALU производят обработку целочисленных операндов, 
 которые поступают из заданных регистров БРЗ. В эти же регистры заносится и результат 
 операции. При этом проверяются также условия ветвления для команд условных переходов 
 и выдаются сигналы перезагрузки конвейера команд в случае неправильно предсказанного 
 ветвления. Исполнительное ядро работает с повышенной скоростью выполнения операций 
 (вдвое по отношению к самому процессору, Intel называет это <I>Rapid Execute Engine</I>).
  (Рис.5).
  <P align=center><IMG alt="Rapid Execute Engine" border=0 height=335 
      src="4_4.jpg"       width=500> 
      <H4 align=center>Рис. 5. Rapid Execute Engine</H4>
     Например, микрокоманда сложения целочисленных операндов при тактовой 
	 частоте процессора 1,5 МГц выполняется всего за 0,36 нс.<BR>
     <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Адреса операндов, выбираемых из
	  памяти, вычисляются блоком формирования 
	адреса (БФА), который реализует интерфейс с кэш-памятью данных 
	1-го уровня (L1) ёмкостью 8 Кбайт. В соответствии с заданными 
	в декодированных командах способами адресации формируются 48 адресов для 
	загрузки операндов из памяти в регистр БРЗ и 24 адреса для записи из 
	регистра в память (в Pentium III формируются 16 адресов для загрузки регистров и 
	12 адресов для записи в память). При этом БФА формирует адреса операндов 
	для команд, которые ещё не поступили на выполнение. При обращении к памяти 
	БФА одновременно выдаёт адреса двух операндов: один для загрузки операнда 
	в заданный регистр БРЗ, второй - для пересылки результата из БРЗ в память. 
	Таким образом реализуется процедура предварительного чтения данных для 
	последующей их обработки в исполнительных блоках, которая называется 
	спекулятивной выборкой.<BR>
     <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Аналогичным образом
	  организуется параллельная работа блоков SSE, FPU, MMX, 
	которые используют отдельный набор регистров и блок формирования адресов операндов.
    При выборке операнда из памяти производится обращение к кэш-памяти 
	данных (L1), которая имеет отдельные порты для чтения и записи, для 
	увеличения производительности, Intel применил для доступа к L1-кешу новый 
	алгоритм, чем уменьшил в Pentium 4 латентность этого кеша до двух 
	процессорных тактов вместо трех тактов в Pentium III. За один такт 
	производится выборка операндов для двух команд. Время обращения к этой кэш-памяти 
	составляет 1,42 нс при тактовой частоте 1,5 ГГц, что в 2,1 раза меньше, 
	чем при обращении к кэш-памяти данных в процессоре Pentium III, работающем 
	на частоте 1,0 ГГц. <BR>
     <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;При формировании адресов обеспечивается 
	 обращение к заданному сегменту памяти.
	 Каждый сегмент может делиться на страницы, размещаемые в различных местах 
	 адресного пространства. Блоки трансляции адреса обеспечивают формирование 
	 физических адресов команд и данных при использовании страничной организации 
	 памяти. Для сокращения времени трансляции используется внутренняя буферная 
	 память, которая хранит базовые адреса наиболее часто используемых страниц.<BR>
     <P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;В Pentuim 4 используется 
	 гиперконвейерная технология выполнения команд, 
	при которой число ступеней конвейера достигает 20 (в Pentium - 5 ступеней, в 
	Pentium III - 11). Таким образом одновременно в процессе выполнения может 
	находиться до 20 команд, находящихся на разных стадиях (ступенях) их реализации.
	 Чего же достиг Intel, так удлинив конвейер? Благодаря декомпозиции выполнения
	  каждой команды на более мелкие этапы, каждый из этих этапов теперь может 
	  выполняться быстрее, что позволяет беспрепятственно увеличивать частоту процессора.
	   Так, если при используемом сегодня технологическом процессе 0.18 мкм предельная 
	   частота для Pentium III составляет 1 ГГц (ну или, по более оптимистичным оценкам, 
	   1.13 ГГц), Pentium 4 сможет достигнуть частоты 2 ГГц <BR>
<P align=center><IMG alt="Конвейер Pentium 4" border=0 height=219 
      src="5_5.jpg" 
      width=500> 
      <H4 align=center>Рис. 6. Конвейер Pentium 4 по сравнению с предшественниками</H4>
<P align=justify>&nbsp;&nbsp;&nbsp;&nbsp;Однако, у чрезмерно длинного конвейера есть 
и свои недостатки.  Эффективность конвейера резко снижается из-за необходимости 
его перезагрузки при выполнении условных ветвлений, когда требуется произвести 
очистку всех предыдущих ступеней и выбрать команду из другой ветви программы. 
Чтобы сократить потери времени, связанные с перезагрузкой конвейера, используется
 блок предсказания ветвлений. Его основной частью является ассоциативная память, 
 называемая буфером адресов ветвлений (BTB - <I>Branch Target Buffer</I>), в которой
  хранятся 4092 адреса ранее выполненных переходов. Отметим, что в BTB процессора 
  Pentium III хранятся адреса только 512 переходов. Кроме того, BTB содержит биты, 
  хранящие предысторию ветвления, которые указывают, выполнялся ли переход при 
  предыдущих выборках данной команды. При поступлении очередной команды условного 
  перехода указанный в ней адрес сравнивается с содержимым BTB. Если этот адрес не 
  содержится в BTB, то есть ранее не производились переходы по данному адресу, то 
  предсказывается отсутствие ветвления. В этом случае продолжается выборка и 
  декодирование команд, следующих за командой перехода. При совпадении указанного 
  в команде адреса перехода с каким-либо из адресов, хранящихся в BTB, производится 
  анализ предыстории. В процессе анализа определяется чаще всего реализуемое направление 
  ветвления, а также выявляются чередующиеся переходы. Если предсказывается выполнение 
  ветвления, то выбирается и загружается в конвейер команда, размещённая по 
  предсказанному адресу. Усовершенствованный блок предсказания ветвления, 
  используемый в Pentuim 4, обеспечивает 90-% вероятность правильного предсказания. 
  Таким образом резко уменьшается число перезагрузок конвейера при неправильном 
  предсказании ветвления.<BR><br>
<div align = center> <a href="javascript:history.back(1)">
  <font color="#3c2e9c">НАЗАД</font></a> | <a href="contents.html">
  <font color="#3c2e9c">СОДЕРЖАНИЕ</font></a> | <a href="3.htm">
  <font color="#3c2e9c">СЛЕДУЮЩАЯ</font></a></font> <br>
</div>
</HTML>