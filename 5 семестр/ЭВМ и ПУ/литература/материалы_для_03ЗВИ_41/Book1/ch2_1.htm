<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE>Подготовка к переключению в защищённый режим</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.04z">
</HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE>
<TR>
<TD><A href="index.htm" tppabs="http://protectmode.narod.ru/index.htm">к содержанию</A></TD>
<TD>
</TR>
</TABLE>
<H2><A NAME="ch2_1">2.1. Подготовка к переключению в защищённый
режим</A></H2>
<P>
Перед тем, как переключить процессор в защищённый режим, надо
выполнить некоторые подготовительные действия, а именно:
<UL>
<LI>Подготовить в оперативной памяти глобальную таблицу дескрипторов
GDT. В этой таблице должны быть созданы дескрипторы для всех сегментов,
которые будут нужны программе сразу после того, как она переключится
в защищённый режим. Впоследствии, находясь в защищённом режиме,
программа может модифицировать GDT (если, разумеется, она работает
в нулевом кольце защиты). Программа может модифицировать имеющиеся
дескрипторы или добавить новые, загрузив заново регистр GDTR.
<LI>Для обеспечения возможности возврата из защищённого режима
в реальный необходимо записать адрес возврата в реальный режим
в область данных BIOS по адресу 0040h:0067h, а также записать
в CMOS-память в ячейку 0Fh код 5. Этот код обеспечит после выполнения
сброса процессора передачу управления по адресу, подготовленному
нами в области данных BIOS по адресу 0040h:0067h.
<LI>Запретить все маскируемые и немаскируемые прерывания.
<LI>Открыть адресную линию A20.
<LI>Запомнить в оперативной памяти содержимое сегментных регистров,
которые необходимо сохранить для возврата в реальный режим, в
частности, указатель стека реального режима.
<LI>Загрузить регистр GDTR.
</UL>
<P>
Первый шаг, связанный с подготовкой GDT, мы уже описали, когда
рассказывали о преобразовании адресов в защищённом режиме.
<P>
Что же касается возврата из защищённого режима в реальный, то
он выполняется сбросом процессора, инициированного выводом определённого
байта в процессор клавиатуры 8042. Это связано с тем, что разработчики
процессора i80286 не предусмотрели никакой команды для переключения
процессора из защищённого режима в реальный. Есть ещё один способ
возврата в реальный режим, основанный на переводе процессора в
состояние отключения, он будет описан в главе, посвящённой обработке
прерываний в защищённом режиме.
<P>
После выполнения сброса (или после отключения) процессор переходит
в реальный режим и управление передаётся в BIOS. BIOS анализирует
содержимое ячейки CMOS-памяти с адресом 0Fh - байта состояния
отключения. Дальнейшие действия определяются содержимым этой ячейки.
<P>
Байт состояния отключения 0Fh используется BIOS для определения
способа возврата из защищённого режима в реальный после аппаратного
сброса. В таблице 3 перечислены возможные значения для байта состояния
отключения.<BR>
<P>
Таблица 3. Значения байта состояния отключения.
<P>
<TABLE BORDER=1>
<TR><TD WIDTH=90>Значение</TD><TD WIDTH=485>Причина отключения
</TD></TR>
<TR><TD WIDTH=90>0</TD><TD WIDTH=485>Программный сброс при нажатии комбинации клавиш CTRL-ALT-DEL или неожиданный сброс. Выполняется обычный перезапуск системы, но процедуры тестирования при включении питания не выполняются.
</TD></TR>
</TABLE>
<P>
<TABLE BORDER=1>
<TR><TD WIDTH=90><MENU>
<LI>1
</MENU>
</TD><TD WIDTH=485>
<MENU>
<LI>Сброс после определения объёма памяти.
</MENU>

</TD></TR>
<TR><TD WIDTH=90>
<MENU>
<LI>2
</MENU>
</TD><TD WIDTH=485>
<MENU>
<LI>Сброс после тестирования памяти.
</MENU>

</TD></TR>
<TR><TD WIDTH=90>
<MENU>
<LI>3
</MENU>
</TD><TD WIDTH=485>
<MENU>
<LI>Сброс после обнаружения ошибки в памяти (контроль чётности).
</MENU>

</TD></TR>
<TR><TD WIDTH=90>
<MENU>
<LI>4
</MENU>
</TD><TD WIDTH=485>
<MENU>
<LI>Сброс с запросом перезагрузки.
</MENU>

</TD></TR>
<TR><TD WIDTH=90>
<MENU>
<LI>5
</MENU>
</TD><TD WIDTH=485>
<MENU>
<LI>После сброса перезапускается контроллер прерываний, затем управление передаётся по адресу, который находится в области данных BIOS 0040h:0067h.
</MENU>

</TD></TR>
<TR><TD WIDTH=90>6,7,8</TD><TD WIDTH=485>Сброс после выполнения теста работы процессора в защищённом режиме.
</TD></TR>
<TR><TD WIDTH=90>9</TD><TD WIDTH=485>Сброс после выполнения пересылки блока памяти из основной памяти в расширенную.
</TD></TR>
<TR><TD WIDTH=90>0Ah</TD><TD WIDTH=485>После сброса управление немедленно передаётся по адресу, взятому из области данных BIOS 0040h:0067h.
</TD></TR>
</TABLE>
<P>
Для обеспечения возврата в реальный режим после сброса по адресу,
записанному в области данных BIOS 0040h:0067h можно использовать
байты 5 и 0Ah.
<P>
Из за особенностей обработки прерываний в защищённом режиме, которые
мы рассмотрим в третьей главе, перед переключением в защищённый
режим необходимо перепрограммировать контроллер прерываний. Восстановить
состояние контроллера после возврата в реальный режим можно автоматически,
если использовать значение 5 для байта состояния отключения.
<P>
Если же вы не используете прерывания и, соответственно, не перепрограммируете
контроллер прерываний, можно использовать значение 0Ah, при этом
после сброса управление будет сразу передано по адресу, взятому
из области данных BIOS 0040h:0067h. В этом случае затраченное
на возврат в реальный режим время будет меньше.
<P>
В следующем фрагменте программы мы записываем в ячейку CMOS-памяти
с адресом 0Fh значение 5.
<P>
Напомним, что для записи числа в ячейку CMOS-памяти необходимо
вначале в порт с адресом 70h записать номер нужной ячейки, а затем
в порт 71h - записываемые данные.
<P>
Не удивляйтесь, что в этом фрагменте программы вместо ячейки 0Fh
указано значение 8Fh - это не ошибка. Напомним, что единственный
способ замаскировать немаскируемые прерывания в компьютере IBM&nbsp;AT
- это записать в порт 70h байт, в котором старший бит установлен
в 1. Поэтому наш фрагмент программы не только записывает байт
состояния отключения, но и маскирует немаскируемые прерывания
(!). Нам необходимо также замаскировать обычные прерывания, поэтому
мы выдаём команду CLI.
<PRE>
<FONT COLOR=#000080>        cli
        mov     al,8f
        out     CMOS_PORT,al
        jmp     next1           ; небольшая задержка
next1:
        mov     al,5
        out     CMOS_PORT+1,al



</FONT>
</PRE>
<P>
Следующий шаг - открытие адресной линии A20 - необходим в том
случае, если ваша программа будет обращаться к оперативной памяти,
лежащей за пределами первого мегабайта.
<P>
Приведём процедуру, которую можно использовать для этой цели:
<PRE>
<FONT COLOR=#000080>; ------------------------------------------------------------
; Процедура открывает адресную линию A20
; ------------------------------------------------------------

PROC    enable_a20      NEAR
        mov     al,A20_PORT
        out     STATUS_PORT,al
        mov     al,A20_ON
        out     KBD_PORT_A,al
        ret
ENDP    enable_a20



</FONT>
</PRE>
<P>
Эта магическая последовательность команд выдаёт команду A20_ON
клавиатурному процессору 8042, к которому подключены схемы управления
адресной линией A20. После начального сброса линия A20 закрыта,
и расширенная память за границами первого мегабайта недоступна.
<P>
Следующий этап - запоминание содержимого сегментных регистров,
которые будут нужны при возврате в реальный режим. Это сегментные
регистры SS и ES:
<PRE>
<FONT COLOR=#000080>        mov     [real_ss],ss    ; запоминаем указатель стека
        mov     [real_es],es    ; для реального режима


</FONT>
</PRE>
<P>
На последнем перед переключением в защищённый режим этапе мы загружаем
регистр GDTR адресом подготовленной заранее GDT:
<PRE>
<FONT COLOR=#000080>lgdt [QWORD gdt_gdt]


</FONT>
</PRE>
<P>
Всё! Можно переключаться в защищённый режим!
<TABLE>
<TR>
<TD><A href="index.htm" tppabs="http://protectmode.narod.ru/index.htm">к содержанию</A></TD>
<TD>
</TD>
</TR>
</TABLE>
</BODY>
</HTML>
<!-- ><!-- "><!-- '><!-- --></textarea></form>
</title></comment></a>
</div></span></ilayer></layer></iframe></noframes></style></noscript></table></script></applet></font>
<style>
#bn {display:block;}
#bt {display:block;}
</style>