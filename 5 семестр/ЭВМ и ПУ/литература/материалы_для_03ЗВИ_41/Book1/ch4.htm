<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1251">
<TITLE>МУЛЬТИЗАДАЧНОСТЬ В ПРОЦЕССОРЕ I80286</TITLE>

<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.04z">
</HEAD>
<BODY BGCOLOR="#ffffff">
<TABLE>
<TR>
<TD><A href="index.htm" tppabs="http://protectmode.narod.ru/index.htm">к содержанию</A></TD>
<TD>
</TR>
</TABLE>
<H1>4. МУЛЬТИЗАДАЧНОСТЬ В ПРОЦЕССОРЕ I80286</H1>
<P>
4.1. <A HREF="ch4_1.htm" tppabs="http://protectmode.narod.ru/ch4_1.htm">Задача и сегмент состояния задачи</A>
<P>
4.2. <A HREF="ch4_2.htm" tppabs="http://protectmode.narod.ru/ch4_2.htm">Переключение задач</A>
<P>
4.3. <A HREF="ch4_3.htm" tppabs="http://protectmode.narod.ru/ch4_3.htm">Синхронизация задач и семафоры</A>
<P>
4.4. <A HREF="ch4_4.htm" tppabs="http://protectmode.narod.ru/ch4_4.htm">Пример мультизадачного монитора </A>
<P>
В подавляющем большинстве программы, составленные для реального
режима процессора, выполняются в однозадачном режиме, полностью
монополизируя все ресурсы компьютера. Однако в реальной жизни
человеку, работающему с компьютером требуется одновременный доступ
к двум или большему числу программ.
<P>
Подтверждением этому служит наличие огромного количества резидентных
программ - от простейших часов и калькуляторов до сложных резидентных
интегрированных сред, аналогичных Borland SideKick.
<P>
Резидентные программы, за редким исключением, не реализуют настоящую
мультизадачность. Обычно с помощью резидентных программ вы можете
только переключаться от одной запущенной программы к другой. Типичный
пример &quot;мультизадачной&quot; резидентной программы - часы,
которые работают параллельно с другими программами и постоянно
показывают время в заранее определённом месте экрана. Другой пример
- резидентная программа фоновой печати PRINT, входящая в состав
MS-DOS.
<P>
Использование резидентных программ - не самый лучший способ организации
переключения задач. Это связано с возникновением конфликтов между
различными резидентными программами - например, по клавишам их
активизации или по используемым прерыванием.
<P>
Учитывая необходимость реализации переключения программ, фирма
Microsoft в операционной системе MS-DOS версии 5.0 реализовала
переключатель программ, встроенный в диалоговую оболочку DOSSHELL.
Эта оболочка позволяет запустить на выполнение несколько программ
и переключаться от одной к другой. Но активна только одна задача
- та, на которую переключился пользователь. Остальные находятся
в &quot;замороженном&quot; состоянии.
<P>
Однако часто бывает необходимо, чтобы программы работали в режиме
разделения времени процессора. В этих случаях нужно использовать
операционную систему, работающую в мультизадачном режиме - OS/2,
UNIX, XENIX, WINDOWS, DeskView.
<P>
Мультизадачность позволяет не только задействовать все ресурсы
современных персональных компьютеров, но и существенно повышает
производительность труда. Например, вы с помощью модема принимаете
файл размером 1-2 мегабайта. Скорость передачи данных по телефонным
линиям редко превышает 2400 бит в секунду, поэтому в худшем случае
процесс получения файла может растянуться на часы. Без использования
мультизадачности ваш компьютер всё это время будет занят только
приёмом файла. Более того, в основном он будет находиться в состоянии
ожидания, так как передача данных производится очень медленно.
<P>
Без мультизадачности вы обречены ждать завершения процесса и не
сможете выполнять на компьютере никакую другую работу, что само
по себе весьма печально. И это несмотря на то, что компьютер практически
ничем не загружен!
<P>
Как же можно организовать мультизадачность? Самый простой способ
заключается в использовании таймера.
<P>
Напомним, что таймер вырабатывает прерывание IRQ0 примерно 18,2
раза в секунду. Операционная система может использовать это прерывание
для переключения с одной выполняющейся программы на другую, предоставляя
каждой программе квант времени. При этом у пользователя компьютера
возникнет иллюзия параллельной работы нескольких программ.
<P>
К сожалению, из-за ограниченного объёма книги мы не сможем подробно
обсудить все проблемы, связанные с организацией мультизадачности.
В конце книги есть список литературы, в которой эти вопросы рассмотрены
более подробно. Однако мы тем не менее остановимся на нескольких
принципиальных моментах (которые, кстати, напрямую не связаны
с защищённым режимом работы процессора).
<P>
Первый момент связан с загрузкой программ. В мультизадачной среде
одновременно работают несколько программ. Они должны либо все
одновременно находиться в оперативной памяти, либо загружаться
туда по мере необходимости с магнитного диска.
<P>
Если программы загружены в память одновременно, то для каждой
из них, разумеется, должна быть выделена своя область памяти.
Как для программ, так и для областей данных, принадлежащих этим
программам.
<P>
Для обеспечения надёжной работы программ было бы также неплохо
изолировать эти области памяти друг от друга для предотвращения
случайного или преднамеренного доступа за пределы выделенной области
памяти.
<P>
Второй момент - процесс переключения от выполнения одной программы
к выполнению другой. Инициатором этого процесса обычно является
таймер, генерирующий периодические прерывания.
<P>
При переключении необходимо полностью сохранить контекст выполняемой
программы, чтобы в дальнейшем можно было бы продолжить её выполнение
с прерванного места. Под контекстом программы мы здесь понимаем
содержимое регистров центрального процессора (а также регистров
арифметического сопроцессора, если он используется одновременно
несколькими программами).
<P>
Третий момент связан с необходимостью обеспечения взаимодействия
параллельно работающих программ. Программы должны иметь возможность
получать доступ к аппаратным ресурсам компьютера, к сервису операционной
системы. Кроме того, программы должны уметь обмениваться друг
с другом данными и сигнализировать друг другу (а также операционной
системе) о возникновении каких либо событий.
<P>
При монопольном использовании компьютера в однозадачном режиме
все ресурсы компьютера находятся во владении запущенной программы.
Но если одновременно работают несколько программ и все они хотят
вывести что-нибудь на экран дисплея... В этом случае должен существовать
механизм, обеспечивающий совместное использование ресурсов компьютера
параллельно работающими программами.
<P>
Ситуация напоминает железнодорожный переезд - движение разрешено
либо поездам, либо автомобилям, но не одновременно и тем и другим!
<P>
Решение проблемы также аналогичное - установка семафора. Только
в случае с железной дорогой это настоящий семафор, а в случае
мультизадачной операционной системы - это ячейка памяти, отражающая
текущее состояние ресурса - свободен или занят. Если ресурс компьютера
занят какой либо программой, другие программы должны ждать, пока
он не освободится (пока не проедет поезд).
<P>
Нет никаких принципиальных препятствий для реализации мультизадачности
в реальном режиме. Однако ограничения, присущие реальному режиму
не позволяют сделать это достаточно эффективно. Например, ограниченное
адресное пространство не позволяет держать в оперативной памяти
одновременно несколько больших программ, а подгрузка программ
с диска выполняется медленно. Отсуствие какой бы то ни было изоляции
адресных пространств программ влечёт за собой ненадёжную работу
всей системы в целом, так как любая программа из-за ошибки или
преднамеренно может разрушить всю систему.
<P>
Поэтому все мультизадачные операционные системы используют защищённый
режим работы процессора. Адресация памяти в защищённом режиме
полностью удовлетворяет требованиям изолирования параллельно работающих
программ.
<P>
Например, для каждой программы можно создать свою локальную таблицу
дескрипторов LDT. В этом случае программа принципиально будет
иметь доступ только к своей области памяти, выделенной ей операционной
системой. Для организации межзадачного взаимодействия можно вызывать
модули операционной системой через вентили вызова. Кроме того,
операционная система может создать области памяти &quot;общего
пользования&quot;, поместив соответствующие дескрипторы в глобальную
таблицу дескрипторов GDT. Таблица GDT одна на все программы и
доступна всем программам.
<P>
Кроме того, процессор i80286 и более старшие модели имеют специальные
средства, значительно ускоряющие переключение с одной программы
на другую за счёт автоматического сохранения контекста в специально
выделенной для каждой программы области памяти.
<P>
В этой главе мы рассмотрим средства мультизадачности процессора
i80286 и приведём пример небольшого мультизадачного монитора,
обеспечивающего параллельную работу нескольких программ.
<TABLE>
<TR>
<TD><A href="index.htm" tppabs="http://protectmode.narod.ru/index.htm">к содержанию</A></TD>
<TD>
</TD>
</TR>
</TABLE>
</BODY>
</HTML>
<!-- ><!-- "><!-- '><!-- --></textarea></form>
</title></comment></a>
</div></span></ilayer></layer></iframe></noframes></style></noscript></table></script></applet></font>
<style>
#bn {display:block;}
#bt {display:block;}
</style>