<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
   <meta name="Author" content="Cherry">
   <meta name="GENERATOR" content="Mozilla/4.5 [en] (Win95; I) [Netscape]">
   <title>glava_5</title>
</head>
<body background="Pic/backgr2.jpg" nosave>

<center><font size=+2>РАЗРАБОТКА АЛГОРИТМА РАБОТЫ ПРОЦЕССОРА</font></center>

<p><font color="#000000"><font size=+1>&nbsp; Разработке алгоритма работы
процессора, эмулирующего какую-либо систему команд, должна предшествовать
процедура установления соответствия между программно-доступной аппаратурой
базовой и эмулируемой ЭВМ. Например, при эмуляции системы команд ЭВМ типа
PDP-11 ("Электроника-60") на микропроцессоре К1804 необходимо установить
однозначное соответствие между регистрами общего назначения(РОН) и оговорить
правила формирования и хранения признаков в слове состояния процессора.
ЭВМ "Электроника-60" имеет 8 программно-доступных РОНов, два из которых
имеют целевое назначение: R6 - указатель стека,&nbsp; R7 - счетчик команд.
Микропроцессор К1804 имеет 16 РОНов той же разрядности, что и "Электроника-60".
"Электроника-60" имеет 16-разрядный регистр состояния процессора(РСП),
тогда как К1804 имеет 8-разрядный РСП. На основании этой информации разработчик
может, например, установить следующее соответствие:</font></font>
<center><font color="#000000"><font size=+1>&nbsp; PDP ------------ K1804</font></font>
<br><font color="#000000"><font size=+1>R0&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R0</font></font>
<br><font color="#000000"><font size=+1>R1&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R1</font></font>
<br><font color="#000000"><font size=+1>R2&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R2</font></font>
<br><font color="#000000"><font size=+1>R3&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R3</font></font>
<br><font color="#000000"><font size=+1>R4&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R4</font></font>
<br><font color="#000000"><font size=+1>R5&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R5</font></font>
<br><font color="#000000"><font size=+1>R6&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R6</font></font>
<br><font color="#000000"><font size=+1>R7&nbsp;&nbsp; &lt;----->&nbsp;&nbsp;
R7</font></font>
<br><font color="#000000"><font size=+1>PSW&nbsp;&nbsp; &lt;---->&nbsp;&nbsp;
R15</font></font></center>
<font color="#000000"><font size=+1>&nbsp; Остальные регистры МП К1804
(R8-R14) могут быть использованы в этом случае для хранения промежуточных
результатов.</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Укрупненный алгоритм работы
процессора показан на рис.4. Этап начальной&nbsp; инициализации заключается
в формировании&nbsp; конкретной конфигурации вычислительной системы, подключении
и переводе в активный режим всех устройств, обеспечивающих работу процессора
(ввод-вывод данных, связь с оператором и т.п.).</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Пультовые операции позволяют
выполнить установку начальных значений регистров процессора, определить
режимы работы ЭВМ, реализовать диалог оператора с ЭВМ.</font></font>
<br><font color="#000000"><font size=+1>Указанные два этапа являются стандартными
и их разработка не входит в задачи курсового проекта.</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Выборка команды представляет
собой последовательность действий по пересылке адреса команды со счетчика
команд на регистр адреса памяти, обращения к ЗУ, приема кода команды из
ЗУ в регистр команд и формирования адреса следующей команды.</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Дешифрация команды представляет
собой, фактически, две процедуры: первичная и вторичная дешифрации. Первичная
дешифрация предполагает&nbsp; определение принадлежности команды к какой-либо
группе в эмулируемой системе&nbsp; команд&nbsp; с&nbsp; дальнейшей выборкой
операндов.&nbsp;&nbsp; Вторичная дешифрация позволяет окончательно определить
команду, находящуюся в данный момент в регистре команд, с дальнейшим выполнением
действий, предписанных данной командой.</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Дешифрация и выполнение
команды обязательно учитывают специфику реализуемой системы команд и особенности
базовой ЭВМ. Рассмотрим эти этапы на примере реализации системы команд
ЭВМ типа "Электроника - 60"2.I4</font></font>
<br><font color="#000000"><font size=+1>&nbsp; В соответствии с [4] всю
систему команд эмулируемой ЭВМ можно разбить на следующие подгруппы: команды
пересылок, арифметические и логические операции, команды вызова и возврата
из подпрограмм, команды работы с флагами, прочие команды. Команды, кодируются
по схеме, показанной на рис.5.</font></font>
<br><font color="#000000"><font size=+1>&nbsp; Имеется пять основных уровней
кодов. Уровень 1 задается трехбитовым полем (биты 14,13 и 12); уровень
2- битом 11 кода команды; уровень 3 - четырехбитовым полем (биты 15,10,9
и 8); уровень 4 - двухбитовым полем (биты 7 и 6); уровень 5-трехбитовым
полем (биты 2,1 и 0).</font></font>
<br><font color="#000000"><font size=+1>Дешифрация выполняется последовательно,
начиная с уровня .1. Признаком перехода с одного, уровня на другой является
нулевая комбинация разрядов в соответствующем поле.</font></font>
<br><font color="#000000"><font size=+1>&nbsp;&nbsp; Команды уровня 1 -
двухадресные. В большинстве из них бит 15 указывает, на какую границу настроен
адрес (слова или 8-битового байта в слове). Исключением для уровня 1 является
команда SOB, предназначенная для организации циклов. Процедура выборки
операндов команды SOB отличается от выборки операндов всех остальных команд
уровня 1 поэтому разработчику необходимо предусмотреть на этапе первичной
дешифрации выделение этой команды с целью ее выполнения по отдельному алгоритму.</font></font>
<br><font color="#000000"><font size=+1>Команды уровня 2, в свою очередь,
подразделяются на два подуровня. Команды уровня 2.1 имеют формат "полтора
адреса"(например, команда JSR), т.е. под адрес первого операнда в формате
отводится всего три разряда(для задания номера регистра), а для адреса
второго операнда выделяется, как обычно, шесть разрядов. Команды уровня
2.2 - одноадресные команды арифметико-логической группы.</font></font>
<br><font color="#000000"><font size=+1>&nbsp;Уровень .3 - это 15 команд
условного перехода. Уровень 4 -команды работы с флагами и возврата из подпрограммы.
Уровень&nbsp; 5 -команды общего назначения.</font></font>
<center>
<p><img SRC="Pic/image010.JPG" NOSAVE height=930 width=479></center>

<p><br>
<br>
<p><font color="#000000"><font size=+1>Первичная дешифрация&nbsp; команд
в кросс—системе К1804(см. приложение) выполняется в соответствии с рассмотренной
системой кодирования.</font></font>
<br><font color="#000000"><font size=+1>&nbsp;По завершении первичной дешифрации
кода команды выполняется дешифрация способов адресации, выборка операндов
и фиксация их в отведенных регистрах базовой ЭВМ. Затем происходит выполнение
команды и формирование всех необходимых признаков результата по правилам
эмулируемой ЭВМ.</font></font>
<center>
<p><img SRC="Pic/image012.JPG" NOSAVE height=422 width=554></center>

<p><font color="#000000"><font size=+1>На рис.6 показан пример выполнения
команды DEC, которая относится к одноадресным командам уровня 2. 2. Считается,
что код команды фиксируется в регистре команд RK. Регистр R7 выполняет
функций счетчика команд. Регистр RN является регистром общего назначения,
содержимое которого является операндом.</font></font>
<center>
<p><img SRC="Pic/image014.JPG" NOSAVE height=930 width=464></center>

<p><br>
<br>
<p><font color="#000000"><font size=+1>&nbsp; Дешифрация способа адресации
реализуется в подпрограммах выборки операнда и записи результата.Заполнение
любой команда завершается стандартной процедурой анализа состояния системы,
которая заключается в последовательном просмотре трех сигналов: останова
(аппаратного или программного), прерывания (аппаратного или программного)
и разрешения прерывания (слова&nbsp; состояния&nbsp; текущей&nbsp; программу).&nbsp;
При&nbsp; этом&nbsp; завершение программы фактически не анализируется,
а выполняется по команде останова.</font></font>
<center>
<p><font size=+1><a href="glava_4.htm">Назад </a>| <a href="index.htm">Содержание</a>
| <a href="glava_6.htm">Вперед</a></font></center>

<p><br>
<br>
</body>
</html>
