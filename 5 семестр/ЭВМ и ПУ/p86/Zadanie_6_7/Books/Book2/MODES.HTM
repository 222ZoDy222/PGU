<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0040)http://avsdov.newmail.ru/modes/modes.htm -->
<HTML><HEAD><TITLE>Соловьев А. Режимы работы процессоров семейства Intel x86</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="Alexei V. Soloviev" name=Author>
<META content="MSHTML 6.00.2800.1106" name=GENERATOR>
<META http-equiv=Keywords 
content="защищенный режим, реальный режим, виртуальный режим, режим системного управления, SMM, V86, PM, RM, Соловьев"></HEAD>
<BODY text=#000000 vLink=#004080 aLink=#008000 link=#000080 bgColor=#cccccc 
background=images/paper.gif>
<CENTER><A title="Сервер ПГУ" href="http://www.karelia.ru/psu/" 
target=_top>Петрозаводский государственный университет</A></CENTER>
<CENTER><A title="Страничка кафедры" href="http://dfe3300.karelia.ru/" 
target=_top>Кафедра информационно-измерительных систем и физической 
электроники</A></CENTER><BR>&nbsp;<BR>
<H2 align=center>Режимы работы процессоров семейства Intel x86</H2>
<H4 align=center><A 
href="mailto:avsdov@newmail.ru"><I>А.В. Соловьев </I></A>,<I>Н. 
  Ю. Ершова </I></H4>
<BR>&nbsp;<BR>
<H4>СОДЕРЖАНИЕ</H4>
<UL>
  <LI><A href="modes.htm#Intro">Вступление</A> 
  <LI><A href="modes.htm#Switch">Переключение между режимами</A> 
  <LI><A href="modes.htm#Linear">Формирование физического адреса</A> 
    <UL>
      <LI><A href="modes.htm#LinNoSel">Формирование линейного адреса без участия 
        селекторов</A> 
      <LI><A 
    href="modes.htm#LinWithSel">Формирование линейного адреса в защищенном режиме</A> 
      <LI><A href="modes.htm#Paging">Страничное преобразование адресов</A></LI>
    </UL>
  <LI><A href="modes.htm#Protection">Защита по привилегиям</A> 
    <UL>
      <LI><A href="modes.htm#SegmProt">Защита на уровне сегментов</A> 
      <LI><A href="modes.htm#PageProt">Защита на уровне страниц</A></LI>
    </UL>
  <LI><A 
  href="modes.htm#MultiTask">Мультизадачность</A> 
  <LI><A href="modes.htm#SMM">Особенности режима системного управления</A> 
  <LI><A href="modes.htm#Compare">Сравнительные характеристики режимов процессора</A> 
  <LI><A 
  href="modes.htm#Literature">Литература</A> 
  <LI>Приложения:
  <OL>
      <LI><A href="cr-s.htm">Структура управляющих регистров процессора</A> 
      <LI><A href="descr.htm">Формат и типы дескрипторов</A> 
      <LI><A href="gdt-idt.htm">Пример GDT, IDT и TSS в ОС MS Windows 95</A></LI>
    </OL></LI></UL>&nbsp;<BR><A name=Intro>
<H4>ВСТУПЛЕНИЕ</H4></A>&nbsp;&nbsp;&nbsp; Впервые о различных режимах работы 
процессоров Intel x86 стали говорить с появлением процессора 80286. Это был 
первый представитель данного семейства процессоров, в котором были реализованы 
многозадачность и защищенная архитектура. Чтобы обеспечить совместимость с 
предыдущими представителями этого семейства (8086,8088,80186) в процессоре 80286 
было реализовано два режима функционирования: режим эмуляции 8086 (режим 
реального адреса) и защищенный режим, в котором используются все возможности 
процессора. В последующих поколениях процессоров этого семейства защищенный 
режим становится основным режимом работы. Для процессоров, начиная с 80386, 
иногда говорят еще об одном режиме работы - виртуальном режиме (режим 
виртуального 8086). В данном реферате он будет рассматриваться как особое 
состояние задачи защищенного режима.<BR>&nbsp;&nbsp;&nbsp; В новых поколениях 
процессоров Intel появился еще один режим работы - режим системного управления 
(System Management Mode). Впервые он был реализован в процессоре 386SL и 486SL. 
Начиная с расширенных моделей 486х процессоров, этот режим стал обязательным 
элементом архитектуры x86-совместимых процессоров. С его помощью прозрачно даже 
для операционной системы на уровне BIOS реализуются функции 
энергосбережения.<BR>&nbsp;&nbsp;&nbsp; В данном реферате рассматриваются 
особенности функционирования процессора в различных режимах. Режимы 
рассматриваются для 32-разрядных процессоров семейства Intel: 80386, i486, 
Pentium, а также процессоров с архитектурой P6 (Pentium Pro, Pentium II, 
Celeron, Xeon, Pentium III). <BR>&nbsp;<BR><A name=Switch>
<H4>ПЕРЕКЛЮЧЕНИЕ МЕЖДУ РЕЖИМАМИ</H4>
</A><IMG 
alt="Схема переключения между режимами" src="images/modes.gif" align=right> &nbsp;&nbsp;&nbsp; 
После инициализации процессор находится в режиме реального адреса. Процессор может 
быть переведен в защищенный режим установкой <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR0">бита 0 (Protect Enable) в регистре CR0:</A> 
<TABLE border=0>
  <TBODY>
  <TR>
    <TD><FONT face="Courier New" size=1><B>MOV EAX,00000001h<BR>MOV 
      CR0,EAX</B> </FONT></TD>
    <TD align=middle width=50>или </TD>
    <TD><FONT face="Courier New" size=1><B>MOV AX,0001h<BR>LMSW AX</B> 
    </FONT></TD></TR></TBODY></TABLE>&nbsp;&nbsp;&nbsp; Второй вариант "достался в 
наследство" от 16-тиразрядной архитектуры 80286, для совместимости с которой ее 
регистр MSW (Machine Status Word) отображается на младшее слово регистра 
CR0.<BR>&nbsp;&nbsp;&nbsp; Вернуться в режим реального адреса процессор может по 
сигналу RESET или (в отличие от 80286) сбросив бит PE:<BR><FONT 
face="Courier New" size=1><B>MOV EAX,00000000h<BR>MOV 
CR0,EAX</b></FONT><B><BR></B>&nbsp;&nbsp;&nbsp; Для совместимости с 80286 инструкция 
<B>LMSW</B> бит PE не сбрасывает.<BR>&nbsp;&nbsp;&nbsp; Режим системного 
управления изолирован от других режимов. Процессор переходит в этот режим только 
аппаратно: по низкому уровню на контакте <I>SMI#</I> или (для Pentium и выше) по 
команде с шины APIC. Никакой программный способ не предусмотрен для перехода в 
этот режим. Процессор возвращается из режима системного управления в тот режим, 
при работе в котором был получен сигнал <I>SMI#</I>. Возврат происходит по 
команде <B>RSM</B>. Эта команда работает только в режиме системного управления и 
в других режимах не распознается, генерирую исключение #6 (недействительный код 
операции). <BR>&nbsp;<BR><A name=Linear>
<H4>ФОРМИРОВАНИЕ ФИЗИЧЕСКОГО АДРЕСА</H4></A>&nbsp;&nbsp;&nbsp; В различных 
режимах процессор по-разному формирует физический адрес. Существует три этапа 
формирования физического адреса:
<OL>
  <LI><FONT face="Courier New">Формирование эффективного адреса</FONT>: из 
  логического адреса (база-индекс-смещение) процессор вычисляет эффективный 
  адрес - расстояние от базового адреса текущего сегмента памяти. 
  <LI><FONT face="Courier New">Формирование линейного адреса</FONT>: эффективный 
  адрес складывается с базовым адресом сегмента, полученное значение является 
  адресом в плоском (линейном) 4Гбайтном виртуальном пространстве. 
  <LI><FONT face="Courier New">Страничная трансляция адресов</FONT>: линейное 
  4Гбайтное адресное пространство с помощью 4Кбайтных страниц отображается на 
  физически присутствующие блоки памяти (физическое 
пространство).</LI></OL>
&nbsp;&nbsp;&nbsp; Первый этап во всех режимах проходит одинаково. Различия начинаются 
со второго этапа. В различных режимах по-разному определяется базовый адрес сегмента. 
Третий этап присутствует только в защищенном режиме - в режиме реального адреса 
и в режиме системного управления страничное преобразование адресов запрещено, 
полученный линейный адрес считается физическим адресом. Однако и в защищенном 
режиме страничной трансляции может не быть. Страничная трансляция включается программно 
установкой <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR0">бита 31 (Paging) в регистре CR0:</A><BR>
<FONT face="Courier New" size=1><B>MOV EAX,80000001h<BR>MOV 
CR0,EAX</b></FONT><B><BR></B>
<P>&nbsp;&nbsp;&nbsp; <A name=LinNoSel><B>Формирование линейного адреса без 
участия селекторов.</B></A><BR>
  <IMG 
alt="Схема формирования линейного адреса без селекторов" 
src="images/realaddr.gif" align=right> &nbsp;&nbsp;&nbsp; В режиме реального адреса 
  и в режиме системного управления используется упрощенная схема формирования 
  линейного адреса. Эта же схема используется для вычисления адресов задачи защищенного 
  режима, находящейся в состоянии эмуляции 8086 (Virtual 8086 Mode). В этом случае 
  базовый адрес сегмента берется из сегментного регистра. Значение в сегментном 
  регистре представляет собой биты 4-19 базового адреса сегмента. Из этого следует, 
  что сегменты в этих режимах выравнены по 16-байтной границе и все сегменты начинаются 
  в пределах нижнего мегабайта линейного адресного пространства. Предел для всех 
  сегментов одинаков. В режиме реального адреса и для задачи в состоянии VM86 
  предел сегмента - 64Кбайт, а в режиме системного управления - 4Гбайт. 
<P>&nbsp;&nbsp;&nbsp; <A name=LinWithSel><B>Формирование линейного адреса в 
защищенном режиме</B></A><BR>&nbsp;&nbsp;&nbsp; Особенностью защищенного режима 
является использование селекторов и дескрипторов для обращения к 
памяти.<BR>
  &nbsp;&nbsp;&nbsp; <A title="Формат дескриптора" 
href="descr.htm"><I>Дескриптор</i></A><I> - это 8-байтная единица описательной 
  информации, распознаваемая устройством управления памятью в защищенном режиме, 
  хранящаяся в дескрипторной таблице.</I> Дескриптор сегмента содержит базовый 
  адрес описываемого сегмента, предел сегмента и права доступа к сегменту. Дескрипторы 
  являются основой защиты и мультизадачности. В защищенном режиме сегменты могут 
  начинаться с любого линейного адреса и иметь любой предел вплоть до 4Гбайт. 
  Существуют две обязательных <A 
title="Пример GDT и IDT в ОС MS Windows 95" 
href="gdt-idt.htm">дескрипторных таблицы</A> - глобальная (GDT) и дескрипторная 
  таблица прерывания (IDT),- а также множество (до 8192) локальных дескрипторных 
  таблиц (LDT), из которых в один момент времени процессору доступна только одна. 
  Дескрипторы сегментов могут находиться в GDT или LDT. Расположение дескрипторных 
  таблиц определяется регистрами процессора GDTR, IDTR, LDTR. Регистры GDTR и 
  IDTR - 6-байтные, они содержат 32 бита линейного базового адреса дескрипторной 
  таблицы и 16 бит предела таблицы. Программно доступная часть регистра LDTR - 
  16 бит, которые являются селектором LDT. Дескрипторы LDT находятся в GDT. Однако 
  чтобы не обращаться каждый раз к GDT в процессоре имеется теневая (программно 
  недоступная) часть регистра LDTR, в которую процессор помещает дескриптор LDT 
  при каждой перегрузке селектора в регистре LDTR.<BR>
  &nbsp;&nbsp;&nbsp; <I>Значения, помещаемые в сегментные 
регистры, называются <U>селекторами</U>. Селектор содержит индекс дескриптора в 
дескрипторной таблице, бит определяющий, к какой дескрипторной таблице 
производится обращение (LDT или GDT), а также запрашиваемые права доступа к 
сегменту.</I> Таким образом, селектор выбирает дескрипторную таблицу, выбирает 
дескриптор из таблицы, а по дескриптору определяется положение сегмента в 
линейном пространстве памяти. Однако обращение к дескрипторным таблицам 
происходит только при загрузке селектора в сегментный регистр. При этом 
процессор помещает дескриптор в теневую (программно недоступную) часть 
сегментного регистра. При формировании линейного адреса дескриптор сегмента 
процессору уже известен.<BR>
<CENTER>
    <IMG alt="Схема формирования линейного адреса в защищенном режиме" 
src="images/pmaddr.gif">
</CENTER>
<P>&nbsp;&nbsp;&nbsp; <A name=Paging><B>Страничное преобразование 
адресов</B></A><BR>&nbsp;&nbsp;&nbsp; Механизм сегментации обеспечивает 
превосходную защиту, но он не очень удобен для реализации свопинга (подкачки). В 
дескрипторе сегмента есть бит присутствия, по нему процессор определяет, 
находится ли данный сегмент в физической памяти или он находится в ВЗУ (на 
винчестере). В последнем случае генерируется исключение #11, обработчик которого 
может подгрузить сегмент в память. Неудобство заключается в том, что различные 
сегменты могут иметь различную длину. Этого можно избежать, если механизм 
подкачки реализовывать на основе страничного преобразования. Особенностью этого 
преобразования является то, что процессор в этом случае оперирует с блоками 
равной длины (4Кбайт) - <I>страницами</I>.<BR>
  &nbsp;&nbsp;&nbsp; В страничном преобразовании участвуют два типа структур: 
  <I>каталоги таблиц</I> и <I>таблицы страниц</I>. Эти структуры состоят из 1024 
  32-битных элементов. Элементы содержат старшие 20 бит физического адреса адресуемых 
  объектов. Элементы таблицы страниц адресуют страницы, а элементы каталога таблиц 
  адресуют таблицы страниц. Старшие 20 бит физического адреса каталога таблиц 
  хранится в <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR3">регистре CR3 (Page Directory Base Register)</A>. (Это единственный 
  регистр процессора, который содержит физический адрес памяти). Все структуры 
  выравнены по границе страницы.<BR>
  <A 
name=PDE_PTE><IMG alt="Схема страничного преобразования 4К/32" 
src="images/line4k.gif"></A> <BR>
  &nbsp;&nbsp;&nbsp; В процессе страничной 
трансляции адресов полученный линейный адрес разбивается на три части. Старшие 
десять бит линейного адреса являются индексом элемента из каталога таблиц. По 
этому элементу определяется физический адрес таблицы страниц. Биты 21-12 
линейного адреса выбирают элемент из этой таблицы страниц. Выбранный элемент 
определяет физический адрес страницы. Младшие 12 бит линейного адреса определяют 
смещение от начала страницы. <BR>
  &nbsp;&nbsp;&nbsp; В процессорах, начиная с Pentium, страницы могут иметь размер 
  4Кбайт или 4Мбайт (эта возможность называется <I>расширением размера страниц</I>), 
  а в процессорах с архитектурой P6 при включенном <I>расширении физического адреса</I> 
  - 4Кбайт или 2Мбайт. (Расширение физического адреса заключается в использовании 
  36-битного физического адреса вместо 32-битного.) Расширение размера страниц 
  включается установкой <A title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR4">бита 4 (Page Size Extension) в регистре CR4</A>, а расширение 
  физического адреса - установкой <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR4">бита 5 (Physical Address Extension) в регистре CR4</A>. Обе 
  возможности работают только в защищенном режиме при включенной страничной трансляции 
  адресов. В таблице показаны возможные сочетания управляющих битов и их совокупный 
  результат. 
<TABLE width="100%" align=center border=2>
  <TBODY>
  <TR>
    <TD align=middle><B>PG (CR0)</B> </TD>
    <TD align=middle><B>PAE (CR4)</B> </TD>
    <TD align=middle><B>PSE (CR4)</B> </TD>
    <TD align=middle><B>PS (PDE)</B> </TD>
    <TD align=middle><B>Размер страницы</B> </TD>
    <TD align=middle><B>Разрядность физического адреса</B> </TD></TR>
  <TR>
    <TD align=middle>0</TD>
    <TD align=middle>x</TD>
    <TD align=middle>x</TD>
    <TD align=middle>x</TD>
    <TD align=middle>-</TD>
    <TD align=middle>32 бит</TD></TR>
  <TR>
    <TD align=middle>1</TD>
    <TD align=middle>0</TD>
    <TD align=middle>0</TD>
    <TD align=middle>x</TD>
    <TD align=middle>4K</TD>
    <TD align=middle>32 бит</TD></TR>
  <TR>
    <TD align=middle>1</TD>
    <TD align=middle>0</TD>
    <TD align=middle>1</TD>
    <TD align=middle>0</TD>
    <TD align=middle>4K</TD>
    <TD align=middle>32 бит</TD></TR>
  <TR>
    <TD align=middle>1</TD>
    <TD align=middle>0</TD>
    <TD align=middle>1</TD>
    <TD align=middle>1</TD>
    <TD align=middle>4M</TD>
    <TD align=middle>32 бит</TD></TR>
  <TR>
    <TD align=middle>1</TD>
    <TD align=middle>1</TD>
    <TD align=middle>x</TD>
    <TD align=middle>0</TD>
    <TD align=middle>4K</TD>
    <TD align=middle>36 бит</TD></TR>
  <TR>
    <TD align=middle>1</TD>
    <TD align=middle>1</TD>
    <TD align=middle>x</TD>
    <TD align=middle>1</TD>
    <TD align=middle>2M</TD>
    <TD align=middle>36 бит</TD></TR></TBODY></TABLE>&nbsp;&nbsp;&nbsp; Для страниц 
размером 4Мбайт действует упрощенная (одноуровневая) схема формирования 
физического адреса. В этом случае физический адрес (старшие 10 бит) страницы 
хранится непосредственно в каталоге таблиц. Младшие 22 бита линейного адреса 
задают смещение от начала страницы. Конечно, страницы большого размера неудобны 
для подкачки при работе с маленькими приложениями, но тот факт, что при 
включенном PSE (или PAE) в системе можно использовать страницы обоих размеров 
позволяет повысить эффективность работы: на страницах большого размера можно 
разместить код операционной системы, к которому часто обращаются все приложения 
и который не следует выгружать из памяти, при этом экономится место - не нужны 
промежуточные таблицы страниц.<BR>
<IMG 
alt="Схема страничного преобразования 4M/32" src="images/line4m.gif"> <BR>
&nbsp;&nbsp;&nbsp; В процессорах с архитектурой P6 шина адреса 36-разрядная, однако 
для того, чтобы процессор генерировал 36-битные адреса необходимо включить PAE. 
Для того, чтобы хранить физический адрес большей разрядности размер элементов 
каталогов таблиц и таблиц страниц увеличен до 64 бит, а число элементов сокращено 
до 512 (чтобы каждая структура занимала ровно 4Кбайт - одну страницу памяти). 
Сокращение числа элементов привело к уменьшению размеров индексов, в результате 
высвободилось два старших бита в линейном адресе. Они используются для индексации 
еще одной структуры - <I>таблицы указателей на каталоги таблиц страниц (PDPT)</I>. 
Эта таблица содержит четыре 64-битных элемента, задающих физические адреса каталогов 
таблиц. Если при 32-битной адресации активен только один каталог таблиц, старшие 
20 бит адреса которого хранятся в регистре CR3(PDBR), то при 36-битной адресации 
активных каталогов 4. Их адреса хранятся в PDPT, а регистр CR3 в этом случае хранит 
адрес PDPT <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR3">(старшие 27 бит физического адреса в битах 5-31 регистра CR3)</A> 
и называется Page-Directory-Pointer Table Register. Таким образом, формирование 
физического адреса для 4Кбайтных страниц трехуровневое, а для 2Мбайтных страниц 
- двухуровневое.<BR>
<IMG 
alt="Схема страничного преобразования 4К/36 и 2М/36" 
src="images/line36.gif"> <BR>
&nbsp;<BR><A name=Protection>
<H4>ЗАЩИТА ПО ПРИВИЛЕГИЯМ</H4></A>&nbsp;&nbsp;&nbsp; Специфической особенностью 
защищенного режима является защита по привилегиям. В процессоре имеется два 
уровня защиты: защита на уровне сегментов и защита на уровне страниц. 
<P>&nbsp;&nbsp;&nbsp; <A name=SegmProt><B>Защита на уровне 
сегментов</B></A><BR>&nbsp;&nbsp;&nbsp; Защита на уровне сегментов представлена 
четырьмя уровнями привилегий. Наиболее привилегирован нулевой уровень, наименее 
привилегирован - третий. В реальных операционных системах обычно не используются 
все четыре уровня. UNIX и Windows, например, используют только два уровня 
привилегий - 0 (для ядра системы) и 3 (для всего остального), а OS/2 использует 
уровни 0 (для ядра системы), 2 (для процедур ввода-вывода) и 3 (для прикладных 
программ).<BR>&nbsp;&nbsp;&nbsp; Для описания механизма защиты пользуются 
следующими понятиями:<BR>&nbsp;&nbsp;&nbsp; <I><U>Уровень привилегий 
дескриптора</U> (Descriptor Privilege Level: DPL) - уровень привилегий, на 
который помещен описываемый дескриптором объект.</I> Поле DPL хранится в байте 
прав доступа <A title="Формат дескриптора" 
href="http://avsdov.newmail.ru/modes/descr.htm">дескриптора</A>.<BR>&nbsp;&nbsp;&nbsp; 
<I><U>Текущий уровень привилегий</U> (Current Privilege Level: CPL) - уровень 
привилегий выполняемого сегмента кода.</I> Это значение соответствует DPL 
сегмента кода (кроме подчиняемых сегментов кода). Значение CPL хранится в поле 
RPL селектора сегмента кода, который помещен в регистр CS.<BR>&nbsp;&nbsp;&nbsp; 
<I><U>Запрашиваемый уровень привилегий</U> (Requested Privilege Level: RPL) - 
используется для временного понижения своего уровня привилегий при обращении к 
памяти.</I> RPL заносится в младшие биты селектора.<BR>
  &nbsp;&nbsp;&nbsp; <I><U>Уровень привилегий ввода-вывода</U> (Input/Output Privilege 
  Level: IOPL) - указывает какой уровень привилегирован для работы с портами ввода-вывода.</I> 
  Это значение хранится в <A title="Структура управляющих регистров процессора" 
href="cr-s.htm#EFLAGS">регистре EFLAGS</A> и может быть различным для разных задач 
  <A title="К главе МУЛЬТИЗАДАЧНОСТЬ" 
href="modes.htm#MultiTask">(см. "Мультизадачность")</A>.<BR>
  &nbsp;&nbsp;&nbsp; Защита на уровне сегментов 
состоит в защите от выполнения привилегированных команд, защите доступа к данным 
и защите сегментов кода.<BR>&nbsp;&nbsp;&nbsp; В процессоре есть команды, 
которые могут кардинально изменить состояние всей системы. Такие команды 
выполняются только на нулевом уровне привилегий, а на всех других уровнях 
вызывают нарушение общей защиты (исключение #13). К этим командам относятся:
<UL>
  <LI><B>HLT</B> - останов процессора; 
  <LI><B>CLTS</B> - сброс флажка Task Switched (исп. при управлении 
  мультизадачностью); 
  <LI><B>LIDT, LGDT, LLDT</B> - загрузка регистров дескрипторных таблиц; 
  <LI><B>LTR</B> - загрузка регистра задачи; 
  <LI><B>LMSW</B> - загрузка младшего слова регистра CR0; 
  <LI><B>MOV CRx,reg32</B> - работа с управляющими регистрами; 
  <LI><B>MOV DRx,reg32</B> - работа с регистрами отладки;</LI></UL>а также команды 
работы со специфическими регистрами (TRx - для 386,486; MCRs - для Pentium и P6; 
MTRRs - для P6). Следует отметить, что команда <B>POPFD</B> также чувствительна 
к уровню привилегий. Она не изменяет состояние управляющих флажков IOPL, IF и 
др., если выполняется на уровне привилегий, отличном от 
нулевого.<BR>
&nbsp;&nbsp;&nbsp; Кроме безусловно привилегированных команд есть команды чувствительные 
к уровню привилегий ввода-вывода. Это команды работы с портами (<B>IN, INS, OUT, 
OUTS</B>) и команды сброса/установки флажка разрешения прерываний (<B>CLI, STI</B>). 
Эти команды выполняются только в том случае, если <B>CPL&lt;=IOPL</B>. Если это 
условие не выполняется, то для команд ввода-вывода производится дополнительная 
сверка с картой разрешения портов ввода-вывода <A 
title="К главе МУЛЬТИЗАДАЧНОСТЬ" 
href="modes.htm#MultiTask">(см. "Мультизадачность")</A>. Если код не имеет привилегий 
на выполнение команды, то возникает нарушение общей защиты (исключение #13).<BR>
&nbsp;&nbsp;&nbsp; Второй 
аспект защиты - защита доступа к данным. Код имеет право обратиться к данным, 
которые находятся на том же или на более низком уровне привилегий. При этом 
учитывается не только CPL, но и RPL. Данные доступны, если дескриптор сегмента 
данных имеет 
<CENTER><B>DPL&gt;=max(CPL,RPL)</B>.</CENTER>
Такой контроль производится при загрузке селекторов в сегментные регистры (DS,ES,FS,GS). 
В сегментный регистр можно загрузить только селектор доступного с текущего уровня 
привилегий сегмента данных или, если сегментный регистр не будет использоваться, 
<A 
title="Подробнее о пустом селекторе см. ПРИМЕР GDT в ОС MS Windows 95" 
href="gdt-idt.htm">пустой селектор</A>. Попытка нарушить правило привилегий или 
загрузить селектор системного дескриптора или дескриптора сегмента кода только 
для выполнения в сегментный регистр данных приведет к нарушению общей защиты (исключение 
#13). Кроме того, в командах изменения данных в памяти производится проверка на 
возможность записи в сегмент.<BR>
&nbsp;&nbsp;&nbsp; Особое правило привилегий для сегментов стека. Стек должен 
находиться строго на том же уровне привилегий, что и код программы (<B>DPL=CPL</B>). 
При этом сегмент стека обязательно должен быть присутствующим (P=1) и для него 
должны быть доступны операции и чтения, и записи <A 
title="Формат дескриптора" href="descr.htm">(типы <I>Data Read-Write</I> или <I>Stack 
Read-Write</I>)</A>.<BR>
&nbsp;&nbsp;&nbsp; 
Для защиты сегментов кода используется жесткое правило привилегий: 
<CENTER><B>DPL=CPL</B>.</CENTER>Т.е. межсегментные команды <B>FAR JMP</B> и 
<B>FAR CALL</B> могут передавать управление сегментам кода в пределах того же 
уровня привилегий. Исключением являются подчиненные сегменты кода. При передаче 
управления подчиненному сегменту действует правило: 
<CENTER><B>DPL&gt;=max(CPL,RPL)</B>.</CENTER>Однако при этом подчиненный код 
будет выполняться на том же уровне привилегий, что и вызвавший его код (CPL не 
изменится).<BR>
&nbsp;&nbsp;&nbsp; Для передачи управления между уровнями привилегий используются 
системные дескрипторы, называемые <A 
title="Формат дескриптора" 
href="descr.htm"><I>шлюзами вызова</I></A>. Дескриптор шлюза вызова содержит точку 
входа в привилегированную процедуру (селектор:смещение) и число передаваемых ей 
через стек параметров. Для передачи управления привилегированной процедуре адресуется 
не сама процедура, а шлюз к ней. Шлюзы можно адресовать только в команде <B>FAR 
CALL</B>, т.е. "насовсем" сменить уровень привилегий таким способом нельзя, всегда 
предполагается возврат на более низкий уровень привилегий. Правило разрешения 
вызова через шлюз выглядит так: 
<CENTER><B>DPL<SUB>цели</SUB>&lt;=max(CPL,RPL)&lt;=DPL<SUB>шлюза</SUB></B>.</CENTER>Примеры 
разрешенных переходов показаны на картинке. 
<CENTER>
  <IMG alt="Примеры переходов через шлюзы" 
src="images/gates.gif">
</CENTER>
<IMG alt="Пример переключения стека" 
src="images/st-sw.gif" align=right> &nbsp;&nbsp;&nbsp; При переключении уровней 
привилегий происходит переключение стека. При этом из внешнего (менее привилегированного) 
стека происходит копирование указанного в шлюзе числа параметров во внутренний 
стек. Перед этим во внутреннем стеке сохраняется указатель вершины внешнего стека. 
После копирования параметров во внутренний стек заносится адрес возврата. Привилегированная 
процедура должна заканчиваться инструкцией <B>RETF n</B>, где n - число байт, 
занимаемых параметрами в стеке.<BR>
<FONT size=-2>(Таким образом, при смене уровней привилегий в 
процессорах Intel x86 реализовано соглашение о связях языка 
Pascal.)</FONT><BR>&nbsp;&nbsp;&nbsp; На картинке показан пример переключения 
стека PL3-&gt;PL0 с передачей трех параметров.<BR>
<P>&nbsp;&nbsp;&nbsp; <A name=PageProt><B>Защита на уровне 
страниц</B></A><BR>
  &nbsp;&nbsp;&nbsp; Защита страниц обеспечивается двумя уровнями привилегий: 
  супервизор и пользователь. Уровню супервизора соответствуют 0-й, 1-й, 2-й уровни 
  привилегий сегментов, а уровню пользователя - 3-й. Для каждой страницы указывается 
  <A title="Формат PDE/PTE" 
href="modes.htm#PDE_PTE">(в PDE/PTE)</A>, с какого уровня привилегий она доступна. 
  Правило привилегий таково: с уровня супервизора доступны все страницы, а с уровня 
  пользователя - только страницы с битом U/S=1. Кроме того, в PDE/PTE указывается 
  тип доступа к странице (доступна ли страница для записи): R/W=0 - только чтение, 
  R/W=1 - доступны чтение и запись. Следует отметить действие <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR0">бита 16 (Write Protect) в регистре CR0</A>. Когда этот бит 
  выставлен, страницы уровня пользователя с пометкой "read-only" защищены от записи 
  при обращениях с уровня супервизора.<BR>
  &nbsp;<BR><A name=MultiTask>
<H4>МУЛЬТИЗАДАЧНОСТЬ</H4></A>&nbsp;&nbsp;&nbsp; <I>Под <U>мультизадачностью</U> 
подразумевают способность компьютера выполнять несколько задач одновременно.</I> 
На самом деле процессор некоторое время выполняет один командный поток, затем 
быстро переключается на второй и выполняет его, переключается на третий и т.д. 
При этом при каждом переключении сохраняется контекст прерываемого потока, так 
что потом процессор сможет "безболезненно" продолжить выполнение прерванного 
потока команд. Благодаря высокому быстродействию создается иллюзия того, что все 
задачи выполняются одновременно (параллельно).<BR>
&nbsp;&nbsp;&nbsp; Для управления мультизадачностью нет специальных команд. Задачи 
переключаются командами <B>FAR CALL, FAR JMP, INT, IRET</B>. Однако при этом участвуют 
специальные дескрипторы: <A title="Формат дескриптора" 
href="descr.htm">дескриптор сегмента состояния задачи (Task State Segment) и дескриптор 
шлюза задачи</A>. Когда управление передается на один из таких дескрипторов, происходит 
переключение задачи. При переключении задачи процессор сохраняет (восстанавливает) 
свой контекст в <A 
title="Структура сегмента на примере TSS в ОС MS Windows 95" 
href="gdt-idt.htm">сегменте состояния задачи (TSS)</A>. Селектор TSS выполняемой 
задачи хранится в регистре задачи (Task Register). При переключении задачи процессор 
может сменить LDT, что позволяет назначить каждой задаче свое адресное пространство, 
недоступное для других задач. Можно также перегрузить CR3 (PDBR/PDPTR), что позволяет 
применить для изолирования задач механизм страничного преобразования.<BR>
&nbsp;&nbsp;&nbsp; При переключении задачи с помощью прерывания или особого случая 
происходит автоматический возврат к прерванной задаче. Однако, организуя вложение 
задач, необходимо помнить, что, в отличие от процедур, задачи не являются реенетрантными, 
т.к. при переключении задачи в стек ничего не включается. Дескриптор TSS задачи, 
выполняемой в данный момент, помечается как <A 
title="Формат дескриптора" 
href="cr-s.htm">"занятый"</A>. При переключении на другую задачу с вложением (по 
<B>INT</B> или <B>FAR CALL</B>) Дескриптор TSS остается помеченным. Переключиться 
на занятую задачу нельзя (возникает нарушение общей защиты - исключение #13).<BR>
&nbsp;&nbsp;&nbsp; Для переключения задач 
также действуют правила привилегий. По команде <B>JMP</B> или <B>CALL</B> можно 
переключиться на задачу, TSS которой менее привилегирован: 
<CENTER><B>DPL<SUB>TSS</SUB>&gt;=max(CPL,RPL)</B>.</CENTER>Для особых случаев и 
прерываний это правило не действует. Если обработчик прерывания выполнен в виде 
отдельной задачи, то он может быть вызван независимо от значения 
CPL.<BR>&nbsp;&nbsp;&nbsp; Не совсем удобно адресовать именно TSS для 
переключения задачи, т.к., во-первых, TSS могут быть размещены только в GDT (а в 
IDT или LDT - нет), а, во-вторых, если пользоваться только TSS, то каждую задачу 
мы "намертво" привязываем к определенному уровню привилегий (DPL<SUB>TSS</SUB>), 
с которого она доступна для переключения. Этих недостатков лишены шлюзы задачи. 
Шлюз задачи содержит селектор TSS. Шлюзы задач можно размещать и в IDT, что 
позволяет выполнять обработчики прерываний в виде отдельных задач, и в LDT, что 
позволяет более гибко управлять переключением задач: для второй задачи первая 
может быть видна с одного уровня привилегий, а для третьей - с другого. 
Последняя возможность обеспечивается особым правилом привилегий: при 
переключении задачи через шлюз учитывается только DPL<SUB>шлюза</SUB>, а 
DPL<SUB>TSS</SUB> не играет роли, поэтому одной задаче может соответствовать 
множество шлюзов с различными DPL.<BR>
&nbsp;&nbsp;&nbsp; Следует отметить, что при переключении задачи не сохраняется 
контекст сопроцессора, т.к., во-первых, сопроцессора может вообще не быть, а во-вторых, 
многие задачи могут не использовать сопроцессор, а на сохранение/восстановление 
его контекста уходит много времени. В процессоре предусмотрена возможность простой 
программной реализации переключения задачи с учетом контекста сопроцессора. Дело 
в том, что при переключении задачи процессор выставляет <A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#CR0">бит 3 (Task Switched) в регистре CR0</A>. Если новая задача 
далее не использует сопроцессор, то ничего не происходит. В противном случае, 
встретив команду сопроцессора, когда флаг TS=1, процессор генерирует особый случай 
сопроцессора (исключение #7). Обработчик этого исключения может сохранить/восстановить 
контекст сопроцессора, сбросить флажок TS (командой <B>CLTS</B>) и возобновить 
прерванную задачу.<BR>
&nbsp;&nbsp;&nbsp; Лишь значение первых 68h байт сегмента состояния задачи строго 
определены. Именно это число является минимальным размером TSS. Операционная система 
может по своему усмотрению устанавливать размер TSS и заполнять сегмент данными. 
Она, например, может отвести в нем место под контекст сопроцессора. Кроме того, 
в TSS может располагаться необязательная для задачи структура - <A title="Пример I/O perm bmp для TSS в ОС MS Windows 95" 
href="gdt-idt.htm">двоичная карта разрешения ввода вывода (I/O permission bit 
map)</A>. Ее адрес задается в последнем обязательном поле TSS. Процессор обращается 
к этой карте, когда IOPL не позволяет выполнять инструкцию ввода-вывода. Каждый 
бит этой карты соответствует одному порту ввода-вывода. Если бит сброшен в 0, 
то операция ввода-вывода выполняется без нарушения общей защиты, а если бит выставлен 
в 1, то генерируется исключение #13.<BR>
&nbsp;&nbsp;&nbsp; При переключении задачи процессор может продолжить выполнение 
новой задачи в особом состоянии - в состоянии эмуляции 8086 (VM86). Переход в 
это состояние инициирует установка в 1 <A title="Структура управляющих регистров процессора" 
href="cr-s.htm#EFLAGS">флажка 17 (Virtual Mode) в регистре EFLAGS</A> при восстановлении 
контекста процессора из TSS. Особенностью этого состояния является то, что линейные 
адреса в такой задаче формируются по <A title="Формирование линейного адреса без участия селекторов" 
href="modes.htm#LinNoSel">безселекторной схеме</A>, поэтому защита на уровне сегментов 
фактически не используется. Однако если включено <A title="Страничное преобразование адресов" 
href="modes.htm#Paging">страничное преобразование</A>, то все связанные с ним 
нюансы верны и защита на уровне страниц работает. Для задачи в состоянии VM86 
считается, что CPL=3, код и данные по умолчанию имеют размер 16 бит, пределы всех 
сегментов - 64Кбайт, адресуется только нижний мегабайт линейного пространства.<BR>
&nbsp;&nbsp;&nbsp; Процессор 
может перейти в состояние VM86 не только при переключении задач, но и если при 
возврате из обработчика прерываний по <B>IRET</B> из стека восстанавливается 
образ EFLAGS с битом VM=1. Возврат в обычное состояние происходит по прерыванию 
или особому случаю с переключением задачи или с переходом на нулевой уровень 
привилегий. В системе может быть несколько задач в состоянии VM86. Для их 
изолирования удобно использовать страничное преобразование. <BR>&nbsp;<BR><A 
name=SMM>
<H4>ОСОБЕННОСТИ РЕЖИМА СИСТЕМНОГО УПРАВЛЕНИЯ</H4>
</A>&nbsp;&nbsp;&nbsp; Режим системного управления предназначен для выполнения 
некоторых действий с возможностью их полной изоляции от прикладного программного 
обеспечения и даже операционной системы. Переход в этот режим происходит только 
аппаратно <A 
href="modes.htm#Switch">(см. "Переключение между режимами")</A>. Когда процессор 
находится в режиме SMM, он выставляет сигнал <I>SMIACT#</I>. Этот сигнал может 
служить для включения выделенной области физической памяти (System Management 
RAM), так что память SMRAM можно сделать доступной только для этого режима. <A href="images/smram.gif"><IMG 
alt="Структура контекста CPU в SMRAM" src="images/smram.gif" 
align=right></A><BR>
&nbsp;&nbsp;&nbsp; При входе в режим SMM процессор сохраняет 
свой контекст в SMRAM (контекст сопроцессора не сохраняется!) по адресу SMM Base 
и передает управление процедуре, называемой <I>обработчиком System Management 
Interrupt</I>, по адресу SMM Base+8000h (по умолчанию SMM Base содержит значение 
30000h). Состояние процессора в этот момент точно определено:<BR>
<IMG 
alt="Состояние процессора при входе в SMM" 
src="images/cpuinsmm.gif"><BR>
&nbsp;&nbsp;&nbsp; Следует отметить, что в режиме SMM не предусмотрена работа 
с прерываниями и особыми случаями: прерывания по <I>IRQ</I> и <I>SMI#</I> замаскированы, 
пошаговые ловушки и точки останова отключены, обработка прерывания по NMI откладывается 
до выхода из режима SMM. Если необходимо обеспечить работу с прерываниями или 
особыми случаями, то надо инициализировать IDT и разрешить прерывания, выставив 
<A 
title="Структура управляющих регистров процессора" 
href="cr-s.htm#EFLAGS">флажок 9 (Interrupt Enable) в регистре EFLAGS</A>. Прерывания 
по NMI будут разблокированы автоматически после первой же команды IRET.<BR>
&nbsp;&nbsp;&nbsp; При возврате 
из SMM (по инструкции <B>RSM</B>) процессор восстанавливает свой контекст из 
SMRAM. Обработчик может программно внести изменения в образ контекста 
процессора, тогда процессор перейдет не в то состояние, в котором произошло SMI. 
Если SMI было получено во время выполнения инструкции <B>HLT</B>, то дальнейшие 
действия при выходе из SMM определяются значением поля <I>"Auto HALT 
Restart"</I>: процессор может снова вернуться к инструкции останова или перейти 
к выполнению следующей команды. Если SMI произошло при выполнении инструкции 
ввода-вывода, то в зависимости от значения поля <I>"I/O instruction Restart"</I> 
возможен рестарт инструкции ввода вывода.<BR>&nbsp;&nbsp;&nbsp; Эти особенности 
режима системного управления позволяют использовать его для реализации системы 
управления энергосбережением. <BR>&nbsp;<BR><A name=Compare>
<H4>СРАВНИТЕЛЬНЫЕ ХАРАКТЕРИСТИКИ РЕЖИМОВ ПРОЦЕССОРА</H4></A>
<TABLE width="100%" align=center border=2>
  <TBODY>
  <TR>
    <TD><B>Характеристика</B></TD>
    <TD><B>RM</B></TD>
    <TD><B>PM, VM=0</B></TD>
    <TD><B>PM, VM=1</B></TD>
    <TD><B>SMM</B></TD></TR>
  <TR>
    <TD>Формирование линейного адреса</TD>
    <TD><A title="Формирование линейного адреса без участия селекторов" 
      href="modes.htm#linnosel">без участия селекторов</A></TD>
    <TD><a href="descr.htm">через селекторы и дескрипторы</a></TD>
    <TD><A title="Формирование линейного адреса без участия селекторов" 
      href="modes.htm#linnosel">без участия селекторов</A></TD>
    <TD><A title="Формирование линейного адреса без участия селекторов" 
      href="modes.htm#LinNoSel">без участия селекторов</A></TD>
  </TR>
  <TR>
    <TD>Предел сегментов</TD>
    <TD>64К</TD>
    <TD><A title="Формат дескриптора" 
      href="descr.htm">определяется дескриптором</A></TD>
    <TD>64К</TD>
    <TD>4Г</TD></TR>
  <TR>
    <TD>Размер адреса/данных по умолчанию</TD>
    <TD>16 бит</TD>
    <TD><A title="Формат дескриптора" 
      href="descr.htm">определяется дескриптором</A></TD>
    <TD>16 бит</TD>
    <TD>16 бит</TD></TR>
  <TR>
    <TD>Максимальный объем доступной памяти (виртуальной)</TD>
    <TD>1M<FONT size=-2>+64K-16</FONT></TD>
    <TD>64T<FONT size=-2>-2х4Г</FONT></TD>
    <TD>1M<FONT size=-2>+64K-16</FONT></TD>
    <TD>4Г</TD></TR>
  <TR>
    <TD>Защита</TD>
    <TD>Нет</TD>
    <TD>Да</TD>
    <TD>Только на уровне страниц</TD>
    <TD>Нет</TD></TR>
  <TR>
    <TD>Страничное преобразование (в т.ч. PAE)</TD>
    <TD>Нет</TD>
    <TD>Да</TD>
    <TD>Да</TD>
    <TD>Нет</TD></TR>
  <TR>
    <TD>Мультизадачность</TD>
    <TD>Нет</TD>
    <TD>Да</TD>
    <TD>Да</TD>
    <TD>Нет</TD></TR>
  <TR>
    <TD>Обработка прерываний</TD>
    <TD>IDT - таблица векторов</TD>
    <TD>IDT - дескрипторная таблица</TD>
    <TD>IDT - дескрипторная таблица</TD>
    <TD>IDT - таблица векторов, необходима специальная 
  инициализация</TD></TR></TBODY></TABLE><BR>
&nbsp;
<H4><a name="Literature">ЛИТЕРАТУРА</a></H4>
<OL>
  <LI><a href="http://developer.intel.com/design/pentium/manuals/24319001.pdf">Intel 
    Architecture Software Developer’s Manual. Vol.1: Basic Architecture.</a><BR>
  <LI><a href="ftp://download.intel.com/design/pentium/MANUALS/24319201.pdf">Intel 
    Architecture Software Developer’s Manual. Vol.3: System Programming Guide.</a><BR>
  <LI>Григорьев В.Л. Микропроцессор i486. Архитектура и программирование. Книга 
  1: Программная архитектура. - М.:ГРАНАЛ,1993. - 346 с. 
  <LI>Страусс Э. Микропроцессор 80286. - Рязань:Versus Ltd.,1992. - 224 с. 
</LI></OL><BR>&nbsp;<BR><FONT size=1><I>Последние изменения 
01.04.1999.</I><BR></FONT><BR></BODY></HTML>
