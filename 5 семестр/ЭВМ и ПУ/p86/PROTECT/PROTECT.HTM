<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0057)http://programmer.newmail.ru/programs/protect/PROTECT.HTM -->
<HTML><HEAD><TITLE>Работа процессора i80386 в защищенном режиме.</TITLE><!-- #BeginTemplate "/Templates/main.dwt" --><!-- #BeginEditable "doctitle" --><!-- #EndEditable -->
<META content="text/html; charset=windows-1251" http-equiv=Content-Type>
<LINK 
href="images/main.css" 
rel=stylesheet type=text/css>
<META content="MSHTML 5.00.2614.3500" name=GENERATOR></HEAD>
<BODY aLink=#0066cc bgColor=#000000 link=#0099ff text=#00cc99 vLink=#0099ff>

<HR SIZE=1>
<!-- #BeginEditable "content" -->
<P align=right><B>Богданов Виталий</B>
<P>
<H3 align=center>Работа процессора i80386 в защищенном режиме.</H3>
<P><B>Оглавление:</B> 
<UL>
  <LI><A 
  href="#vvedenie">Введение.</A> 
  <LI><A 
  href="#adres">Управление памятью, адресация.</A> 
    <UL>
      <LI><A 
    href="#segment">Сегменты.</A> 
      <LI><A 
    href="#page">Страницы.</A> 
      <LI><A 
    href="#virtual">Виртуальная память.</A> </LI>
    </UL>
  <LI><A 
  href="#protection">Защита.</A> 
  <LI><A 
  href="#taskmanage">Управление процессами.</A> 
  <LI><A 
  href="#service">Системные вызовы и шлюзы.</A> 
  <LI><A 
  href="#interrupt">Прерывания и особые ситуации.</A> 
  <LI><A 
  href="#io">Ввод и вывод.</A> 
  <LI><A 
  href="#enter">Переход в защищенный режим.</A> 
  <LI><A 
  href="#liter">Литература и ссылки.</A> </LI>
</UL><BR><A name=vvedenie><B>0. Введение.</B></A> 
<P>Системная архитектура процессора i80386 разработана с целью аппаратной 
поддержки современных операционных систем. С точки зрения фирмы Intel такие 
системы должны обеспечивать: 
<UL>
  <LI>управление режимами работы процессора (реальным, защищенным, виртуальным 
  режимом V86); 
  <LI>реализацию многозадачной работы и защиту задач; 
  <LI>эффективное распределение и управление памятью большого размера, поддержку 
  32-х разрядного адресного пространства; 
  <LI>реализацию виртуальной памяти; 
  <LI>совместимость с программами, разработанными для процессоров предыдущих 
  моделей. </LI></UL>
<P>Как средства поддержки этих механизмов в процессор включены следующие 
аппаратные средства: 
<UL>
  <LI>управляющие регистры - CR0, CR2, CR3; 
  <LI>регистры таблиц дескрипторов - GDTR, IDTR, LDTR; 
  <LI>регистр задачи - TR; 
  <LI>транслятор логических адресов в физические; 
  <LI>транслятор страниц (поддержка страничного механизма); 
  <LI>привилегированные команды процессора. </LI></UL>
<P>Многозадачная ОС должна обеспечивать управление работой вычислительной 
системой в тех случаях, когда эта работа состоит из нескольких, одновременно 
идущих видов деятельности. </P>
<P>В многозадачной системе каждый вид деятельности, который может осуществляться 
одновременно с другими называется процессом или задачей. Каждый процесс 
выполняет программу, состоящую из команд и исходных данных. Одна и та же 
программа может выполняться несколькими процессами. Процесс - это совокупность 
инструкций, выполняемых процессором, данных и информации о выполняемой задаче, 
такой как размещенная память, открытые файлы и статус процесса. </P>
<P>Полностью механизмы поддержки многозадачности процессор реализует в 
специальном режиме работы, называемом защищенным, так как именно в этом режиме 
возможно выполнение нескольких процессов с полной изоляцией их друг от друга. 
Каждый из них будет "считать", что выполняется только он один и все ресурсы 
процессора принадлежат ему; он не нарушит работу ОС и других параллельно 
выполняемых программ. </P><BR><A name=adres><B>1. Управление памятью, 
адресация.</B></A> 
<P>Для адресации операндов в 4Gb физическом адресном пространстве прикладные 
программы i80386 используют логическую адресацию. Т.е. адреса, используемые 
программистом, необязательно совпадают с физическими. Блок управления памятью 
транслирует логические адреса программ в физические и посылает их на системную 
шину. Все это происходит на аппаратном уровне и работает очень быстро. 
Логическое адресное пространство организуется как набор из элементарных структур 
- байтов, сегментов, страниц. Наиболее популярны следующие модели: 
<UL>
  <LI><B>Плоское (линейное) </B>логическое адресное пространство. Это массив 
  байтов, не имеющий определенной структуры. Трансляция адреса не требуется, 
  поскольку логический адрес совпадает с физическим. 
  <LI><B>Сегментированное </B>логическое адресное пространство. Состоит из 
  нескольких сегментов, каждый из которых может быть произвольной длины. 
  Логический адрес содержит идентификатор сегмента и смещение внутри сегмента. 
  <LI><B>Страничное </B>логическое адресное пространство. Состоит из большого 
  числа страниц, каждая из которых включает фиксированное число байтов. 
  Логический адрес состоит из идентификатора (номера) страницы и смещения внутри 
  страницы. 
  <LI><B>Сегментно-страничное </B>логическое адресное пространство. Состоит из 
  сегментов, которые в свою очередь состоят из страниц. Логический адрес 
  транслируется в номер страницы и смещение в ней, которые затем транслируются в 
  физический адрес. </LI></UL>
<P>Каждый из этих вариантов хорош для своего класса задач. Архитектура i80386 
поддерживает все четыре возможности. Ниже они будут рассмотрены подробнее. 
</P><BR><A name=segment><B>1.1 Сегменты.</B></A> 
<P>Сегменты являются логическими единицами, хорошо приспособленными под 
программные структуры, имеющие по сути своей переменную длину. Например, при 
этом 4931 байтную процедуру можно уместить в 4931 байтном сегменте. Сегмент в 
80386 может иметь любой размер - от 1 байта до 4 Гбайт. При использовании 
сегментного механизма, для каждого сегмента ОС обязана поддерживать заданный 
архитектурой дескриптор, т.е. структуру данных, содержащую описание сегмента. 
Это два двойных слова, которые выглядят следующим образом: </P>
<P align=center><IMG 
src="images/descript.gif"></P>
<!--<PRE>
  +------------------------------------------------+
  |База сегмента  15..0    |Предел сегмента  15..0 |  1-е двойное слово
  +--------+-+-+-+-+-------+-+---+-+----+-+--------+
  |База    |G|D|0|0|Предел |P|DPL|S|TYPE|A|База    |  2-е двойное слово
  |  31..24| | | | |19..16 | |   | |    | | 23..16 |
  +--------+-+-+-+-+-------+-+---+-+----+-+--------+
</PRE>-->
<UL>
  <LI><B>G</B> - бит гранулярности. Определяет в каких единицах вычисляется 
  длина сегмента: в страницах (4096 байт), если он установлен или в байтах, если 
  сброшен. Этот бит необходим, так как под значение предела сегмента отведено 
  лишь 20 разрядов. 
  <LI><B>D</B> - бит разрядности. Если он установлен, то сегмент 32-х разрядный, 
  сброшен - 16-ти разрядный. 
  <LI><B>P</B> - бит присутствия. Если установлен - сегмент присутствует в 
  памяти, сброшен - отсутствует. Используется механизмом виртуальной памяти. 
  <LI><B>DPL</B> - уровень привилегий дескриптора сегмента (0..3, 0 - высший 
  уровень привилегий, 3 - низший). Уровень привилегий ограничивает круг 
  приложений, которым доступен сегмент. Поле DPL текущего кодового сегмента 
  определяет уровень привилегий выполняемого процесса. 
  <LI><B>S</B> - 0 - системный сегмент, 1 - сегмент кода или данных. 
  <LI><B>TYPE</B> - это поле интерпретируется по-разному, в зависимости от типа 
  сегмента. 
  <LI><B>A</B> - устанавливается в сегментах кода и в сегментах данных при 
  обращении к сегменту, используется механизмом виртуальной памяти. </LI></UL>
<P>Здесь приведен общий формат дескрипторов сегментов: поля S и TYPE могут по 
разному интерпретироваться, в зависимости от назначения сегмента. Помимо обычных 
сегментов кода и данных существуют дескрипторы и сегменты специального вида: 
дескриптор шлюза, сегмент состояния задачи, сегмент локальной таблицы 
дескрипторов. Некоторые из этих структур данных будут описаны ниже. </P>
<P>Все дескрипторы собираются в так называемые таблицы дескрипторов, у каждой 
задачи их три: глобальная (GDT), локальная (LDT) и таблица дескрипторов 
прерываний (IDT). Таблицы - это массивы из дескрипторов и ничего более. Адреса 
этих массивов хранятся в регистрах: GDTR, LDTR, IDTR соответственно. Не всякий 
процесс может изменять эти регистры, так как необходимые команды (LGDT, LLDT, 
LIDT) являются привилегированными (т.е. выполняются только процессами с уровнем 
привилегий 0). Обычно этими регистрами управляет ОС, а прикладным программам они 
недоступны. </P>
<P>Глобальная таблица дескрипторов разделяется всеми процессами и туда обычно 
помещаются шлюзы вызова сервисных процедур ОС (шлюз - специальный дескриптор, 
позволяющий из менее привилегированного сегмента передать управление в кодовый 
сегмент с более высокими привилегиями). Локальная таблица дескрипторов содержит 
сегменты с которыми работает текущий процесс. Таблица дескрипторов прерываний 
содержит шлюзы вызовов обработчиков прерываний. В защищенных системах таблицы 
дескрипторов должны быть сделаны привилегированными структурами, чтобы изменения 
в них могла производить только ОС. </P>
<P>Процессы могут совместно использовать один или несколько сегментов, это может 
быть достигнуто следующими способами: 
<UL>
  <LI>Сегмент, дескриптор которого находится в GDT доступен всем процессам. 
  <LI>Процессы, имеющие общую LDT, имеют и общие сегменты, описанные в LDT 
  (такой подход допустим в случае тесно взаимодействующих процессов). 
  <LI>Дескрипторы в различных LDT могут указывать на один и тот же сегмент, 
  такие дескрипторы называются псевдоименами. </LI></UL>
<P>Выбор дескриптора из таблицы осуществляется с помощью селектора сегмента. 
Селектор сегмента является заменой адреса сегмента, который использовался при 
адресации в i8086. Он также содержит 16 бит, но теперь имеет более сложную 
структуру: 
<P align=center><IMG 
src="images/selector.gif"></P>
<!--<PRE>
             15             2  1  0
             ЪДДДДДДДДДДДДВДДДВДДДДї
             і  Индекс    іTI і RPLі
             АДДДДДДДДДДДДБДДДБДДДДЩ
</PRE>-->
<UL>
  <LI><B>Индекс</B> - индекс в таблице дескрипторов (его длина 13 бит, т.о. в 
  таблице содержится не более 8192 дескрипторов). 
  <LI><B>TI</B> - Если бит установлен, то это селектор в LDT, сброшен - GDT. 
  <LI><B>RPL</B> - уровень привилегий запроса. </LI></UL>
<P>Селекторы текущих сегментов кода, данных и стека хранятся в регистрах CS, DS 
и SS соответственно. Таким образом логический адрес представляет собой пару: 
&lt;селектор сегмента, смещение внутри сегмента&gt;. Исходя из всего 
вышеперечисленного можно построить следующую схему адресации: 
<P align=center><IMG 
src="images/segment.gif"></P>
<!--<PRE>
       Логический адрес          Сегмент
    ЪДДДДДДДДДВДДДДДДДДДДї     ЪДДДДДДДДДДДДї
    іСелектор і Смещение і     і            і
    АВДДДДДДДДБДДДДДДДДВДЩ     і            і
     і ЪДДДДДДДДДДДДї  і       ГДДДДДДДДДДДДґ
     і і            і  АДД + Д>і Операнд    і
     і і            і      і   ГДДДДДДДДДДДДґ
     і ГДДДДДДДДДДДДґ      і   і            і
     А>ґДескриптор  ГДДДДДДБДД>АДДДДДДДДДДДДЩ
       ГДДДДДДДДДДДДґ
       АДДДДДДДДДДДДЩ
</PRE>-->
<P>При обращении к сегменту процессор проверяет: 
<UL>
  <LI><B>Уровень привилегий.</B> Для получения доступа к сегменту программа 
  должна иметь по крайней мере такой же уровень доступа, как и сегмент. 
  <LI><B>Предел.</B> Если смещение выходит за пределы сегмента возникает особая 
  ситуация и управление передается обработчику (обычно это ОС). Это позволяет 
  обнаружить и обработать такие программные ошибки как переполнение стека, выход 
  за границы массива. Например, в первом случае ОС может увеличить стек и 
  выполнить команду повторно. 
  <LI><B>Тип.</B> Каждый дескриптор содержит поле типа, которое процессор 
  проверяет на соответствие исполняемой команде. Это позволяет, например, 
  обнаружить попытку записи в программный код. 
  <LI><B>Права.</B> Дескриптор сегмента может быть помечен правами, 
  ограничивающими множество операций с этим сегментом. Сегмент кода может быть 
  помечен как исполняемый или читаемый, а сегмент данных как доступный только 
  для чтения или чтения/записи. </LI></UL><BR><A name=page><B>1.2 
Страницы.</B></A> 
<P>Независимо от того, содержит ли логическое адресное пространство задачи один 
сегмент или несколько, операционная система может разделить линейное адресное 
пространство на страницы. Для ОС страницы являются удобными элементами 
распределения памяти так как они имеют одинаковый размер (в i80386 - 4096 байт) 
и обеспечивают удобный способ реализации виртуальной памяти. </P>
<P>Страничный механизм включается установкой специального бита (PG) в регистре 
CR0 при помощи привилегированной команды. Когда страничный механизм включен, 
процессор транслирует линейный адрес в физический, используя таблицы страниц. 
Как таблицы дескрипторов процесса определяют его логическое адресное 
пространство, так таблицы страниц задачи определяют ее линейное адресное 
пространство. </P>
<P>Таблицы страниц 80386 организованы по принципу двухуровневой иерархии; каждая 
задача может иметь каталог таблиц страниц. Системный регистр CR3 указывает на 
базу каталога таблиц страниц текущей задачи. Каталог таблиц страниц имеет длину 
равную одной странице и содержит указатели на все множество (до 1024) таблиц 
страниц. Таблицы страниц имеют длину равную одной странице и указывают 
расположение до 1024 страниц. Таким образом каждая таблица страниц описывает до 
4 Mb, а каталог - до 4 Gb, т.е. максимальное адресное пространство. Вот как 
выглядит схема страничной трансляции адреса: 
<P align=center><IMG 
src="images/pages.gif"></P>
<!--<PRE>
        Линейный адрес
  31       21        11      0                          ЪДДДДДДДДДДДДї
 ЪДДДДДДДДВДДДДДДДДДВДДДДДДДДДї                         і            і
 іКаталог іСтраница іСмещение ГДДДДДДДДДДДДДДДДДї       і            і
 АВДДДДДДДБВДДДДДДДДБДДДДДДДДДЩ  ЪДДДДДДДДДДї   і       :            :
  і        і                     :          :   і       ГДДДДДДДДДДДДґ
  і        АДДДДДДДДДДДДДДДї     ГДДДДДДДДДДґ   і       ГДДДДДДДДДДДДґ
  і           ЪДДДДДДДДДДДїі     ГДДДДДДДДДДґ   АДД + Д>іФиз. адрес  і
  і           і           іА + Д>іЭл.таблицыГДї     і   ГДДДДДДДДДДДДґ
  і           ГДДДДДДДДДДДґ  і   ГДДДДДДДДДДґ АДДДДДБДД>ГДДДДДДДДДДДДґ
  АДДДДДД + Д>іЭл.каталогаГДДБДД>ГДДДДДДДДДДґ           іСтраница 4Кбі
 ЪДДДДДДї і   ГДДДДДДДДДДДґ      і          і           ГДДДДДДДДДДДДґ
 і CR3  ГДБДД>АДДДДДДДДДДДЩ      :          :           :            :
 АДДДДДДЩ      Каталог           АДДДДДДДДДДЩ           АДДДДДДДДДДДДЩ
  База         таблиц             Таблицы                Физическая
  каталога     страниц            страниц                  память
</PRE>-->
<P>ОС отвечает за размещение и изменение каталогов таблиц и страниц - это просто 
массивы 32-х разрядных элементов, но начальные адреса этих массивов должны быть 
выровнены по границам кадров страниц (последние 12 бит адреса должны быть равны 
0), это связано с тем, что под адрес страницы в элементе каталога отведено 20 
бит. Рассмотрим элементы каталога и таблицы страниц: 
<P align=center><IMG 
src="images/katalog.gif"></P>
<!--<PRE>
      31         11     8                   0
     ЪДДДДДДДДДДДВДВДВДВДВДВДВДВДВДВДДДВДДДВДї
     іАдрес      і ОС  і0і0іDіAі0і0іU/SіR/WіPі
     АДДДДДДДДДДДБДБДБДБДБДБДБДБДБДБДДДБДДДБДЩ
</PRE>-->
<UL>
  <LI><B>Адрес</B> - физический адрес таблицы страниц или страницы, точнее его 
  старшие 20 бит (младшие 12 бит всегда считаются нулями, поэтому таблицы и 
  нужно выравнивать). 
  <LI><B>ОС</B> - может быть использовано операционной системой по своему 
  усмотрению. 
  <LI><B>D</B> - бит модификации. В каталоге не определен, в таблице 
  устанавливается процессором перед записью в страницу. 
  <LI><B>A</B> - бит доступа. Свидетельствует о том, что к таблице или к 
  странице осуществлялся доступ. 
  <LI><B>P</B> - бит присутствия в памяти. Используется механизмом виртуальной 
  памяти. 
  <LI><B>U/S</B> - бит пользователь/супервизор 
  <LI><B>R/W</B> - бит чтения/записи </LI></UL>
<P>Процессы могут совместно пользоваться отдельными страницами или целыми 
таблицами страниц. Элементы различных таблиц, указывающих на одну и ту же 
страницу, называются синонимами один для другого. Благодаря двухуровневой 
структуре таблиц легче разделить несколько страниц между задачами путем 
разделения целой таблицы. </P>
<P>80386 имеет механизмы для защиты страниц - это рассмотренные выше поля U/S и 
R/W. Вот как ограничивается доступ для процессов с различными привилегиями: 
<P align=center>
<TABLE border=1 cellPadding=5>
  <TBODY>
  <TR>
    <TD align=middle>U/S</TD>
    <TD align=middle>R/W</TD>
    <TD align=middle>Уровень привилегий 3</TD>
    <TD align=middle>Уровень привилегий 0,1,2</TD></TR>
  <TR>
    <TD align=middle>0<BR>0<BR>1<BR>1<BR></TD>
    <TD align=middle>0<BR>1<BR>0<BR>1<BR></TD>
    <TD align=middle>ничего<BR>ничего<BR>чтение<BR>чтение/запись<BR></TD>
    <TD align=middle>чтение<BR>чтение/запись <BR>чтение/запись 
      <BR>чтение/запись<BR></TD></TR></TBODY></TABLE>Так как 80386 проверяет атрибуты 
страниц после проверки атрибутов соответствующих сегментов, то защита страниц 
является удобным способом дополнительной защиты частей сегментов. 
<P><A name=virtual><B>1.3 Виртуальная память.</B></A> 
<P>Виртуальная память позволяет очень большим программам или группам программ 
работать в сравнительно малом объеме физической оперативной памяти. </P>
<P>Системы с виртуальной памятью могут строиться на сегментах или страницах. ОС 
с виртуальной памятью запоминает сегменты или страницы в большой области 
дисковой памяти, называемой "swapping area" ("область обмена"). Физическая 
оперативная память содержит только наиболее используемые сегменты (страницы). 
Пока сегменты или страницы, находящиеся на диске, используются редко, система 
ведет себя так же хорошо, как и система с большой оперативной памятью. </P>
<P>В 80386 присутствуют архитектурные средства, необходимые для реализации 
виртуальной памяти: 
<UL>
  <LI>бит присутствия для каждого сегмента или страницы, который говорит 
  процессору, находится ли страница в памяти или на диске. 
  <LI>механизм особых ситуаций, при помощи которого процессор может указать ОС 
  на необходимость загрузки в память отсутствующего сегмента или страницы. 
  <LI>перезапускаемые команды, позволяющие процессору заново выполнить команду 
  после того, как ОС загрузила страницу в память и пометила ее как 
  присутствующую. </LI></UL>
<P>Далее будем рассматривать страничный механизм реализации, так как сегментный 
реализуется совершенно аналогично. </P>
<P>Когда в процессе трансляции логического адреса процессор получает линейный 
адрес, ссылающийся на элемент таблицы страниц со сброшенным битом присутствия, 
возникает особая ситуация, условно называемая "страничная ошибка". Следствием 
этого является вызов процедуры ОС, для обработки особой ситуации. </P>
<P>При входе в обработчик регистр CR2 содержит линейный адрес, вызвавший ошибку. 
Путем трансляции этого адреса обработчик должен найти элемент каталога, 
связанный с отсутствующей страницей. Все биты, кроме бита присутствия, могут 
быть определены ОС, например, для запоминания положения страницы в swapping 
area. Обработчик должен найти эту страницу на диске, загрузить ее в память, 
изменить адрес и бит присутствия в элементе каталога страниц и вернуть 
управление прерванной программе. При этом процессор заново обратится к команде, 
в ходе выполнения которой возникла особая ситуация, и теперь ее результат будет 
таким, как если бы страница находилась в памяти при первом исполнении. </P>
<P>Кроме того ОС должна поддерживать свободные страничные кадры для того, чтобы 
их мог заполнять обработчик страничных ошибок. Для увеличения их количества 
система должна знать, какой кадр можно освободить. Перед освобождением кадра, 
если он был модифицирован, нужно сохранить его на диске. Для этих целей в 
элементе таблицы страниц есть биты доступа (он устанавливается, если 
производились чтение или запись в страницу) и модификации (устанавливается при 
записи); процессор изменяет эти биты автоматически для всех имеющихся в памяти 
страниц. </P>
<P>Путем периодического просмотра и сброса битов доступа ОС может определить 
страницы, которые давно не использовались. Кадры, содержащие такие страницы, 
являются хорошими кандидатами на освобождение. При освобождении страница 
записывается на диск, только если установлен бит модификации. </P><BR><A 
name=protection><B>2. Защита.</B></A> 
<P>Процессор обеспечивает несколько механизмов защиты. Один из них - взаимное 
отделение адресных пространств процессов при помощи таблиц дескрипторов 
сегментов и таблиц страниц. Помимо этого можно защитить ОС от прикладных 
процессов, одни части ОС от других частей и процессы от некоторых из их 
собственных ошибок. </P>
<P>Многие из средств защиты 80386 основаны на понятии иерархии привилегий. 
Уровень привилегий процесса в любой момент определяется уровнем привилегий 
исполняемого кодового сегмента (т.е. полем DPL его дескриптора). Это так 
называемый текущий уровень привилегий - CPL. Всего уровней 4: от 0 до 3 - 0 - 
высший, а 3 - низший. Имеются еще три понятия, связанных с уровнем привилегий: 
<UL>
  <LI><B>RPL</B> - уровень привилегий запроса. Это уровень привилегий процедуры 
  - поставщика селектора сегмента. Он определяется двумя младшими битами 
  селектора. 
  <LI><B>DPL</B> - уровень привилегий дескриптора целевого сегмента, 
  определяющий наименьший уровень, при котором задача имеет право доступа к 
  дескриптору (и к соответствующему сегменту). Определяется битами 6 и 5 в байте 
  прав доступа. 
  <LI><B>EPL</B> - Эффективный уровень привилегий. Численно равен наименее 
  привилегированному из значений RPL и DPL, т.е. EPL=max(RPL,DPL). </LI></UL>
<P>Процессор 80386 автоматически поддерживает текущий уровень привилегий CPL, 
равный содержимому поля DPL дескриптора сегмента, который адресуется регистром 
CS. При этом значение CPL помещается в двух младших битах CS (т.е. в поле RPL). 
В соответствии со значениями DPL все сегменты в системе оказываются 
распределенными по кольцам защиты соответствующих уровней привилегий. </P>
<P>Имеется три основных схемы организации такой защиты: 
<UL>
  <LI>система без защиты. Все процедуры помещаются в сегменты с уровнем 
  привилегий 0. 
  <LI>деление на супервизор и программы пользователей. Прикладные процессы 
  размещаются в сегментах с уровнем привилегий 3, а системные - в сегментах с 
  уровнем привилегий 0. 
  <LI>использование всех уровней. Ядро ОС помещается на 0 уровень, драйверы 
  устройств - на 1 уровень, уровень 2 отводится под программы разработчиков 
  комплексных систем, а 3 под прикладные программы пользователя. </LI></UL>
<P>Процессор осуществляет проверку на допустимость команд в соответствии с 
текущим уровнем привилегий и уровнем привилегий сегментов, данные из которых 
указаны в качестве операндов. В случае попытки обращения к более 
привилегированному сегменту возникают особые ситуации. </P>
<P>Ряд команд, которые выполняют существенные операции, влияющие на работу 
процессора, может выполнятся только в хорошо отработанных программах на уровне 
привилегий 0 (например в ядре ОС). Такие команды называются привилегированными. 
</P>
<P>К ним относятся: 
<UL>
  <LI><B>LGDT</B> - загрузка глобальной таблицы дескрипторов; 
  <LI><B>LIDT</B> - загрузка таблицы дескрипторов прерываний; 
  <LI><B>LLDT</B> - загрузка локальной таблицы дескрипторов; 
  <LI><B>LMSW</B> - загрузка слова состояния машины; 
  <LI><B>SMSW</B> - сохранение слова состояния машины; 
  <LI><B>LTR</B> - загрузка регистра задачи; 
  <LI><B>MOV</B> в/из CRn - обмен данными с регистрами управления CRn; 
  <LI><B>MOV в/из DRn</B> - обмен данными с регистрами отладки DRn; 
  <LI><B>MOV в/из TRn</B> - обмен данными с тестовыми регистрами TRn; 
  <LI><B>CLTS</B> - сброс флага переключения задачи; 
  <LI><B>HLT</B> - останов. </LI></UL>
<P>Попытки выполнения этих команд с нарушением уровня привилегий вызывают особую 
ситуацию защиты. У 80386 есть и другие команды, чувствительные к текущему уровню 
привилегий - это команды ввода/вывода через порты и команды IRET, POPF. 
</P><BR><A name=taskmanage><B>3. Управление процессами.</B></A> 
<P>В однопроцессорной системе даже многозадачная ОС не может реально выполнять 
несколько процессов параллельно; на самом деле ОС поочередно отдает 
вычислительные ресурсы каждому из них. Для поддержания впечатления, что все 
процессы выполняются одновременно, ОС просто часто переключает процессор на 
выполнение различных задач. В системной архитектуре 80386 для операции смены 
задачи предусмотрены сегменты состояния задачи и команды, выполняющие эту 
операцию. </P>
<P>Для каждого процесса ОС должна определить сегмент состояния задачи (TSS). Эта 
структура данных соответствует тому, что в некоторых ОС называется блоком 
управления процессом. Сегмент состояния задачи состоит из двух частей: младшая 
часть определена системной архитектурой 80386 и содержит значения регистров 
процессора; старшая часть может использоваться ОС для хранения данных, связанных 
с процессом, например, приоритета выполнения. </P>
<P>TSS имеет следующую структуру (на рисунке структура представлена схематично): 

<P align=center><IMG 
src="images/tss.gif"></P>
<!--<PRE>
     ЪДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДї
     : Определяется ОС                   :
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     і Адрес LDT                         і
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     : Сегментные регистры (CS, DS, ...) :
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     : Общие регистры  (EAX, EBX, ...)   :
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     і Регистр флагов (EFLAGS)           і
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     і Указатель команд (EIP)            і
     ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
     : Привилегированные указатели стека :
     АДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДЩ
</PRE>-->
<UL>
  <LI><B>Определяется ОС</B> - в этом поле ОС может хранить любую дополнительную 
  информацию о процессе. 
  <LI><B>Адрес LDT</B> - селектор дескриптора локальной таблицы дескрипторов. 
  <LI><B>Привилегированные указатели стека</B> - пары (ESPn, SSn). При передаче 
  управления через шлюз более привилегированному сегменту значения регистров SS 
  и ESP замещаются значениями SSn, ESPn, где n - новый уровень привилегий. Таким 
  образом привилегированные задачи могут использовать свой стек. </LI></UL>
<P>Для создания нового процесса ОС формирует TSS и инициализирует его 
величинами, необходимыми процессу для начала его выполнения. Выполнение задач 
процессором осуществляется в порядке, определяемом ОС. </P>
<P>80386 хранит селектор сегмента текущего TSS в регистре задачи (TR). Для смены 
процесса ОС выдает команду перехода, операндом которой является селектор TSS 
нового процесса. Процессор исполняет эту команду, занося вначале свои регистры в 
текущий TSS, а затем загружая TR селектором, указанным в команде. </P>
<P>Получив адрес нового TSS, процессор загружает свои регистры величинами из 
нового TSS и продолжает выполнение программы с команды, на которую указывает EIP 
нового процесса. </P><BR><A name=service><B>4. Системные вызовы и шлюзы.</B></A> 

<P>Как мы видели ранее, в целях защиты ОС прикладные программы и данные 
помещаются в менее привилегированные сегменты. Таким образом они лишены 
возможности напрямую вызывать сервисные процедуры ОС. Для того, чтобы позволить 
им это сделать, ОС должна определить одну или более точек входа. В 80386 такие 
точки входа называются шлюзами. </P>
<P>Имеются 4 типа шлюзов: 
<UL>
  <LI><B>шлюз вызова</B> - вызов функции ОС через такой шлюз не отличается от 
  обычного вызова процедуры или функции. 
  <LI><B>шлюз ловушки</B> - для осуществления вызова через шлюз ловушки процесс 
  выполняет команду прерывания. 
  <LI><B>шлюз задач</B> - используется для переключения задач. 
  <LI><B>шлюз прерываний</B> - для вызова обработчиков особых ситуаций. </LI></UL>
<P>Шлюз - это просто дескриптор сегмента специального вида: 
<P align=center><IMG 
src="images/shlus.gif"></P>
<!--<PRE>
   31                  15                               0
  ЪДДДДДДДДДДДДДДДДДДДВДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДї
  іСелектор           і Смещение 15..0                   і  1-е двойное
  ГДДДДДДДДДДДДДДДДДДДЕДВДДДВДВДДДДВДВДВДВДДДДДДДДДДДДДДДґ    слово
  іСмещение 31..16    іPіDPLі0іTYPEі0і0і0іСчетчик дв.слові  2-е двойное
  АДДДДДДДДДДДДДДДДДДДБДБДДДБДБДДДДБДБДБДБДДДДДДДДДДДДДДДЩ    слово
   31                  15           7                   0
</PRE>-->
<UL>
  <LI><B>Селектор</B> - селектор целевого сегмента или селектор TSS (для шлюза 
  задачи) 
  <LI><B>Смещение</B> - Смещение точки входа в целевой сегмент (в шлюзах задачи 
  не используется) 
  <LI><B>P</B> - 0 - дескриптор верен, 1 - дескриптор неверен. 
  <LI><B>DPL</B> - наименьший уровень привилегий, при котором задаче доступен 
  шлюз. 
  <LI><B>TYPE</B> - тип шлюза. 
  <LI><B>Счетчик</B> - Длина параметров копируемых из стека вызывающей процедуры 
  в стек вызываемой. Используется только в шлюзах вызовов. </LI></UL>
<P>Наиболее важно поле DPL - наименьший уровень привилегий, при котором задаче 
доступен шлюз. Обычно при многоуровневой организации защиты программам 
пользователя доступен только сервисный код, который может в свою очередь 
вызывать функции ядра. Эта схема поясняется следующим рисунком: 
<P align=center><IMG 
src="images/ring2.gif"></P>
<!--<PRE>
             ЪДДДДДДДДДДДДДДДДДДДДДДДДї
             і  ЪДДДДДДДДДДДДДДДДДї   і
             і  і ЪДДДДДДДДДДДДДї і   і
             і  і і Код ядра  0 і і   і
             і  і АДДШлюз ядраДДЩ і   і
             і  і Сервисный код 1 і   і
             і  АДСервисный  шлюзДЩ   і
             і Пользовательский код 3 і
             АДДДДДДДДДДДДДДДДДДДДДДДДЩ
</PRE>-->
<P>Чтобы сделать сервисные процедуры доступными для всех задач, ОС помещает их 
шлюзы в глобальную таблицу дескрипторов. </P>
<P>Для осуществления вызова через шлюз ловушки процесс выполняет команду 
прерывания; при вызове через шлюз вызова - команду обычного межсегментного 
перехода. Обе команды изменяют уровень привилегий задачи, переходят к стеку, 
определенному в TSS для старшего уровня привилегий. (ОС должна иметь собственный 
стек, чтобы гарантировать его размеры) Содержимое старого стека будет 
скопировано в новый стек, длина копируемой информации задается полем счетчика 
двойных слов шлюза. После этого управление передается вызванной процедуре. </P>
<P>Передача параметров может осуществляться двумя способами: 
<UL>
  <LI>перед вызовом процесс может заслать параметры в свой стек, они будут 
  автоматически скопированы в привилегированный стек; 
  <LI>если вызов осуществляется через шлюз ловушки, то параметры могут быть 
  переданы в регистрах. </LI></UL><BR><A name=interrupt><B>5. Прерывания и особые 
ситуации.</B></A> 
<P>Прерывания и особые ситуации - это изменение нормального хода программы для 
обработки внешних событий и для сообщения об ошибках. </P>
<P>Прерывания используются для обработки внешних асинхронных событий (таких как 
получение сигналов от оборудования), а особые ситуации - для обработки ошибок и 
особых условий в командах. Так, "командные прерывания" (команда INT n) 
квалифицируются процессором 80386 как особые ситуации. </P>
<P>Особые ситуации можно разделить на: 
<UL>
  <LI><B>Ошибки</B> - это особые ситуации, которые обнаруживаются и генерируются 
  до исполнения вызвавшей их команды (например, обращение к странице, 
  отсутствующей в памяти). 
  <LI><B>Ловушки</B> - особые ситуации, о которых сообщается сразу после 
  выполнения команды, вызвавшей ситуацию (типичный пример командные прерывания). 

  <LI><B>Неудачи</B> - особые ситуации, не позволяющие точно определить 
  команду-причину ситуации (например, аппаратные сбои или недопустимые значения 
  в системных таблицах). </LI></UL>
<P>При возникновении прерывания или особой ситуации вызывается программный 
обработчик. После возврата управления обработчиком 80386 возобновляет выполнение 
потока команд. Поскольку прерывания и особые ситуации очень похожи, процессор 
обрабатывает их одинаково. </P>
<P>Каждый источник прерывания и каждый тип особой ситуации имеет 
идентификационный номер от 0 до 255; 80386 использует этот номер для вызова 
соответствующего обработчика. Номера особых ситуаций определяются процессором в 
соотвествии со следующей таблицей: 
<P align=center>
<TABLE border=1 cellPadding=5>
  <TBODY>
  <TR>
    <TD align=middle>Ситуация</TD>
    <TD align=middle>Номер</TD>
    <TD align=middle>Тип </TD></TR>
  <TR>
    <TD align=left>Ошибка при делении<BR>Отладочная ситуация<BR>Немаскируемое 
      прерывание (NMI)<BR>Однобайтное прерывание<BR>Переполнение<BR>Проверка 
      границ массива<BR>Недопустимый код операции<BR>Сопроцессор 
      отсутствует<BR>Двойная ошибка<BR>Превышение сегмента 
      сопроцессором<BR>Неверный TSS<BR>Сегмент отсутствует<BR>Сбой 
      стека<BR>Общая ошибка защиты<BR>Страничная ошибка<BR>Ошибка 
      сопроцессора<BR>Зарезервировано фирмой Intel<BR>Двухбайтное 
    прерывание<BR></TD>
    <TD 
      align=middle>0<BR>1<BR>2<BR>3<BR>4<BR>5<BR>6<BR>7<BR>8<BR>9<BR>10<BR>11<BR>12<BR>13<BR>14<BR>16<BR>17..31<BR>n<BR></TD>
    <TD 
      align=middle>ошибка<BR>ловушка<BR>NMI<BR>ловушка<BR>ловушка<BR>ошибка<BR>ошибка<BR>ошибка<BR>неудача<BR>ошибка<BR>ошибка<BR>ошибка<BR>ошибка<BR>ошибка<BR>ошибка<BR>ошибка<BR><BR>ловушка<BR></TD></TR></TBODY></TABLE>
<P>Номера прерываний определяются ОС: программируемый контроллер прерываний 
8259A инициализируется ОС таким образом, что каждый источник прерываний 
ассоциируется со своим номером. При появлении прерывания 8259A передает номер 
прерывания процессору. </P>
<P>Получив номер прерывания или особой ситуации, 80386 использует его как индекс 
в таблице дескрипторов прерываний (IDT). IDT может быть расположена в любом 
месте памяти; ОС инициализирует IDT и загружает ее адрес в регистр таблицы 
дескрипторов прерываний (IDTR). </P>
<P>В IDT имеется один шлюз для каждого обработчика прерывания и особой ситуации. 
Обработчик может быть реализован в виде процедуры или задачи. 80386 вызывает 
обработчик в виде процедуры так же, как он выполняет вызов через шлюз. Для 
вызова обработчика в виде задачи выполняется переключение задач. Тип шлюза 
говорит процессору, каким образом вызвать обработчик: 
<P align=center>
<TABLE border=1 cellPadding=5>
  <TBODY>
  <TR>
    <TD align=middle>Тип шлюза</TD>
    <TD align=middle>Обработчик</TD>
    <TD align=middle>Тип шлюза</TD></TR>
  <TR>
    <TD align=left>Шлюз прерывания<BR>Шлюз вызова<BR>Шлюз задачи<BR></TD>
    <TD align=middle>Процедура<BR>Процедура<BR>Задача<BR></TD>
    <TD align=middle>Запрещены<BR>Разрешены<BR>По флагу IF 
  обработчика<BR></TD></TR></TBODY></TABLE>
<P>Обработчики процедуры являются подходящим средством для программ, работающих 
в контексте задачи (т.е. использующих ее адресное пространство и регистры). 
Процедура обработки прерывания или особой ситуации имеет доступ ко всем ресурсам 
текущего процесса: к ее данным и коду, регистру и стеку. </P>
<P>Обработчики в виде задачи должны применяться к аппаратным прерываниям, так 
как они не имеют отношения к текущему процессу и должны иметь собственные 
ресурсы (например, свой стек). Но переключение задач выполняется гораздо 
медленнее передачи управления, и иногда можно применять в качестве обработчиков 
аккуратно написанные процедуры. </P><BR><A name=io><B>6. Ввод и вывод.</B></A> 
<P>Процессор 80386 обеспечивает адресацию портов ввода/вывода аналогично тому, 
как он обеспечивает адресацию памяти. Таким образом можно говорить о 
пространстве ввода/вывода по аналогии с пространством памяти. </P>
<P>Каждый адрес в пространстве ввода/вывода соответствует некоторому 8 битному 
устройству ввода/вывода - порту. Процессор поддерживает 8-, 16-, 32-битные 
порты, причем 16-битный порт трактуется как два соседних 8-битных, а 32-битный - 
как четыре 8-битных. </P>
<P>Общий объем пространства ввода/вывода - 2^16 = 65536 байтов. 8-битным портам 
назначаются адреса от 0 до 65535, 16-битным - 0,2,4,...,65534, а 32-битным - 
0,4,8,...,65532. Адреса портов различных устройств не должны перекрываться. </P>
<P>80386 имеет два класса команд ввода/вывода, обеспечивающих доступ к портам: 
строковые команды (INS, OUTS) пересылают строки данных между памятью и портом, 
команды IN, OUT пересылают данные между регистрами и портом. </P>
<P>Для контроля операций ввода/вывода в защищенном режиме используется два 
механизма системной архитектуры: механизм проверки уровня привилегий и битовая 
карта разрешения ввода/вывода. </P>
<P>При обнаружении команды ввода/вывода в исполняемой программе процессор 
сначала проверяет условие CPL&lt;=IOPL, где CPL - текущий уровень привилегий, а 
IOPL - уровень привилегий ввода/вывода в регистре EFLAGS. При выполнении этого 
условия операция ввода/вывода осуществляется. </P>
<P>В противном случае 80386 обращается к проверке битовой карты разрешения 
ввода/вывода. Каждая задача может иметь отдельную карту - ее 16-битный базовый 
адрес содержится в TSS. Каждый бит карты, начиная с базового адреса, 
соответствует одному из портов ввода/вывода. Завершает карту финальное двойное 
слово, все биты которого установлены в 1. </P>
<P>Процессор проверяет все биты, отведенные для данного порта. Если хотя бы один 
из них установлен, генерируется особая ситуация защиты. Если все они сброшены, 
операция ввода/вывода осуществляется. </P>
<P>Если база карты ввода/вывода имеет значение равное или превосходящее предел 
TSS, то данная задача считается не имеющей карты, и все операции ввода/вывода 
вызывают особую ситуацию защиты при нарушении условия CPL&lt;=IOPL. </P>
<P>Изменить IOPL можно только привилегированной командой POPF. Таким образом в 
защищенных системах ОС полностью контролирует ввод/вывод процессов. </P><BR><A 
name=enter><B>7. Переход в защищенный режим.</B></A> 
<P>Перед тем как описывать процедуру перехода нужно сказать пару слов о 
системном регистре CR0. Этот регистр мы еще не рассматривали, хотя он имеет 
решающее значение в управлении работой процессора. Все команды, изменяющие этот 
регистр являются привилегированными, поэтому обычно этим регистром управляет ОС. 
Структура регистра не очень сложна: 
<P align=center><IMG 
src="images/cr0.gif"></P>
<!--<PRE>
  31                              15                                 0
 ЪДДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДВДДВДДВДДВДДВДДї
 іPGі0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0і0іETіTSіEMіMPіPEі
 АДДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДБДДБДДБДДБДДБДДЩ
                                  АДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДЩ
                                                   MSW
</PRE>-->
<UL>
  <LI><B>MSW</B> - слово состояния машины. 
  <LI><B>PE</B> - разрешение защиты. При сброшенном PE процессор работает в 
  реальном режиме. PE можно установить, загрузив MSW или CR0. Сбросить PE можно 
  только загрузкой CR0 (это сделано в целях совместимости с 80286). 
  <LI><B>MP</B> - бит слежения за сопроцессором. 
  <LI><B>EM</B> - эмуляция сопроцессора. Установка этого бита вызывает генерацию 
  особой ситуации 7 всеми кодами команд сопроцессора. 
  <LI><B>TS</B> - задача переключена. Автоматически устанавливается при 
  переключении задач. 
  <LI><B>ET</B> - тип сопроцессора. ET=1 - используется 32-битный протокол 
  80387, ET=0 - 16-битный протокол 80286. 
  <LI><B>PG</B> - включение страничного механизма. 
  <LI><B>0</B> - бит зарезервирован фирмой Intel. </LI></UL>
<P>Итак, для того чтобы перевести процессор в защищенный режим нужно просто с 
помощью загрузки регистра CR0 или MSW установить флаг PE. Но прежде чем это 
сделать, нужно подготовить системные структуры данных: GDT, IDT, TSS. IDT должна 
иметь длину не менее 256 байт. GDT должна содержать дескрипторы для сегментов 
начального кода и данных. </P>
<P>На рисунке показана простая структура для системы в защищенном режиме: 
<P align=center><IMG 
src="images/example.gif"></P>
<!--<PRE>
      ЪДДДДДДДї Дї                31                            0
  SS  і 0010  і  і               ЪДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДїFFFFFFFF
      АДДДДДДДЩ  і               і Процедуры сброса              і
      :       :  ГДДДДДДДДДДї    ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґFFFFFFF0
      ЪДДДДДДДї  і          і    і Процедуры инициализации       і
  DS  і 0010  і  і          і    ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ
      АДДДДДДДЩ ДЩ          і    і                               і
      ЪДДДДДДДї             і    і Память                        і
  CS  і 0010  ГДДДДДДДДДДДї і    і Пользователя                  і
      АДДДДДДДЩ           і і    і                               і
      ЪДДДДДДДї           і і    і                               і
 GDTR і 0017  і Предел    і і    ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ00000118
      ГДДДДДДДБДДДДї      і і    і Дескриптор сегмента данных    і
 База і 00000100   ГДДДДї і АДДД>ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ00000110
      АДДДДДДДДДДДДЩ    і і      і Дескриптор кодового сегмента  і
      ЪДДДДДДї          і АДДДДД>ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ00000108
 IDTR і 00FF і Предел   і        і Нуль-селектор                 і
      ГДДДДДДБДДДДДї    АДДДДДДД>ГДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДґ00000100
 База і 00000000   ГДДДДї        і Дескрипторы прерываний        і
      АДДДДДДДДДДДДЩ    АДДДДДДД>АДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДДЩ00000000
</PRE>-->
<P>Для перехода в защищенный режим необходимо: 
<OL>
  <LI>Загрузить CR0 с помощью команды "MOV CR0, r/m", причем бит PE должен быть 
  равен 1. 
  <LI>Выполнить команду межсегментного перехода для загрузки CS и очистки 
  очереди команд. 
  <LI>Загрузить сегментные регистры начальными значениями селекторов. </LI></OL>
<P>Несколько важных замечаний: 
<UL>
  <LI>форматы таблиц прерываний в реальном и защищенном режимах существенно 
  отличаются, поэтому перед переключением необходимо запретить прерывания до 
  приведения таблиц в надлежащий вид. 
  <LI>если необходим страничный механизм, то таблицы страниц и регистр CR3 можно 
  инициализировать и в реальном режиме, но бит PG в CR0 можно устанавливать 
  только после перехода в защищенный режим. 
  <LI>загрузка сегментного регистра стека SS может быть выполнена и в реальном 
  режиме. После переключения он указывает на тот же базовый адрес. 
</LI></UL><BR><A name=liter><B>8. Литература и ссылки.</B></A> 
<P>Ссылки на ресурсы Сети, посвященные защищенному режиму: 
<UL>
  <LI><A 
  href="http://www.x86.org/articles/pmbasics/">http://www.x86.org/articles/pmbasics/</A><BR>Статья 
  "Protected Mode Basics" на сайте, посвященном микропроцессорам Intel. Сайт 
  богат ссылками и различной документацией. Здесь можно найти любую информацию о 
  процессорах вплоть до описания ошибок. 
  <LI><A 
  href="http://cdl.iu4.bmstu.ru/CISC/LEARNING/80386.htm">http://cdl.iu4.bmstu.ru/CISC/LEARNING/80386.htm</A><BR>
    Статья на русском описывающая архитектуру i80386. Желающие проверить свои 
    знания по этой теме могут ответить на контрольные вопросы. </LI>
</UL>Осталось перечислить 
использованную литературу: 
<UL>
  <LI><B>Г.В. Орловский "Введение в архитектуру микропроцессора 80386"</B>, Санкт-Петербург, 
    1992 г.<BR>
    Хорошая книжка, которая послужила прототипом для данного сочинения, очень 
    подробная, но немного запутанная. Я попытался изложить ее содержание более 
    доступно. 
  <LI><B>В.М. Михальчук, А.А. Ровдо, С.В. Рыжиков "Микропроцессоры 80x86, Pentium. 
    Архитектура, функционирование, программирование, оптимизация кода."</B>, Минск, 
    1994 г.<BR>
    Для изучения архитектуры не годится, но представляет собой удобный и очень 
    емкий справочник по микропроцессорам семейства 80x86. 
  <LI><B>Андрей Робачевский "Операционная система UNIX"</B>, BHV - Санкт-Петербург, 
    1998 г.<BR>
    Очень хорошо освещены принципы функционирования многозадачных ОС на примере 
    ОС UNIX. К архитектуре 80386 как таковой отношения не имеет</LI>
</UL>
<!-- #EndEditable --> 
<HR SIZE=1>

<TABLE width="100%">
  <TBODY>
  <TR vAlign=top>
    <TD align=left width="20%">
<A   href="protect.htm#top" </A>
    
    <TD>
      <DIV align=center><TT>Created by Vitaly S. Bogdanov , email:<A 
      href="mailto:programming@mail.ru">programming@mail.ru</A>
      

  </TR></TBODY></TABLE></BODY><!-- #EndTemplate --></HTML>
