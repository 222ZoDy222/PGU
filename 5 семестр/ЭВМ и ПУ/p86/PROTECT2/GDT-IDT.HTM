<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0042)http://avsdov.newmail.ru/modes/gdt-idt.htm -->
<HTML><HEAD><TITLE>Соловьев А. Режимы работы процессоров семейста Intel x86. Приложение 3.</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1251">
<META content="Alexei V. Soloviev" name=Author>
<META content="MSHTML 6.00.2800.1106" name=GENERATOR>
<META http-equiv=Keywords 
content="защищенный режим, реальный режим, виртуальный режим, режим системного управления, SMM, V86, PM, RM, Соловьев"></HEAD>
<BODY text=#000000 vLink=#004080 aLink=#008000 link=#000080 bgColor=#cccccc 
background=gdt-idt.files/paper.gif>
<H5 align=center>Режимы работы процессоров семейста Intel x86. Приложение 3.</H5>
<A 
href="modes.htm"><IMG alt="К началу реферата" 
src="images/to_top.gif" align=right border=0></A> 
<H4>ПРИМЕР GDT, IDT И TSS В ОПЕРАЦИОННОЙ СИСТЕМЕ MS WINDOWS 95</H4>
<TABLE width="100%" align=center border=1>
  <TBODY>
  <TR>
    <TD width="55%">
      <CENTER><B>Глобальная дескрипторная таблица</B><BR>GDT Limit:0FFF &nbsp; 
      GDT Base:C138C000</CENTER><FONT size=2><PRE><U> Sel.     Contents      P  PL    Type    GDXU  Base/Sel  Limt/Ofs</U>
0000  0000000000000000      0    free                            
0008  00009B004010FFFF  x   0  CODE ER   0000  00004010  0000FFFF
0010  000093004010FFFF  x   0  DATA RW   0000  00004010  0000FFFF
0018  C0008B00AE9C2069  x   0  TSS-32 busy     C000AE9C  00002069
0020  C1009238C0000FFF  x   0  DATA RW   0000  C138C000  00000FFF
0028  00CF9B000000FFFF  x   0  CODE ER   1100  00000000  000FFFFF
0030  00CF93000000FFFF  x   0  DATA RW   1100  00000000  000FFFFF
0038  C100FB39D80007FF  x   3  CODE ER   0000  C139D800  000007FF
0040  0000F300040002FF  x   3  DATA RW   0000  00000400  000002FF
0048  000000000000FFFF      0    free                            
0050  000000000000FFFF      0    free                            
0058  000000000000FFFF      0    free                            
0060  000000000000FFFF      0    free                            
0068  000089000000FFFF  x   0  TSS-32          00000000  0000FFFF
0070  00CF92000000FFFF  x   0  DATA RW   1100  00000000  000FFFFF
0078  008FF1000000FFFF  x   3  DATA RO   1000  00000000  000FFFFF
0080  8040F30010000FFF  x   3  DATA RW   0100  80001000  00000FFF
0088  C0409A0319701000  x   0  CODE ER   0100  C0031970  00001000
....  ................  .  ..  ........  ....  ........  ........
0140  C100F23C90008000  x   3  DATA RW   0000  C13C9000  00008000
0148  0000F300CC140133  x   3  DATA RW   0000  0000CC14  00000133
0150  C000F100EA200003  x   3  DATA RO   0000  C000EA20  00000003
0158  80008209F0003FFF  x   0  LDT             8009F000  00003FFF
0160  0000F2003F1000FF  x   3  DATA RW   0000  00003F10  000000FF
0168  8140F2A7D0000FFF  x   3  DATA RW   0100  81A7D000  00000FFF
0170  8240F214E0000FFF  x   3  DATA RW   0100  8214E000  00000FFF
0178  8240F217F0000FFF  x   3  DATA RW   0100  8217F000  00000FFF
0180  8240F21800000FFF  x   3  DATA RW   0100  82180000  00000FFF
....  ................  .  ..  ........  ....  ........  ........
</PRE></FONT></TD>
    <TD width="40%">
      <CENTER><B>Дескрипторная таблица прерываний</B><BR>IDT Limit:02FF &nbsp; 
      IDT Base:82864000</CENTER><FONT size=2><PRE><U>No.      Contents     P PL   Type    Sel:Offset</U>
0000 C0008E0000281200 x  0 INTR-32  0028:C0001200
0001 C0008E0000281210 x  0 INTR-32  0028:C0001210
0002 C0008E0000284054 x  0 INTR-32  0028:C0004054
0003 C000EE0000281220 x  3 INTR-32  0028:C0001220
0004 C000EE0000281230 x  3 INTR-32  0028:C0001230
0005 C000EE0000281240 x  3 INTR-32  0028:C0001240
0006 C0008E0000281250 x  0 INTR-32  0028:C0001250
.... ................ .  . ........ ............. 
0021 0000E700003B03C8 x  3 TRAP-16  003B:000003C8
0022 C0008E0000284124 x  0 INTR-32  0028:C0004124
0023 C0008E000028412C x  0 INTR-32  0028:C000412C
0024 C0008E0000284134 x  0 INTR-32  0028:C0004134
0025 0000E700003B03C0 x  3 TRAP-16  003B:000003C0
0026 0000E700003B03C2 x  3 TRAP-16  003B:000003C2
0027 C0008E000028414C x  0 INTR-32  0028:C000414C
.... ................ .  . ........ .............
002E C0008E0000284184 x  0 INTR-32  0028:C0004184
002F 0000E700003B0380 x  3 TRAP-16  003B:00000380
0030 C000EE0000281B04 x  3 INTR-32  0028:C0001B04
0031 0000E700003B0210 x  3 TRAP-16  003B:00000210
0032 C0008E00002841A4 x  0 INTR-32  0028:C00041A4
0033 0000E700003B0388 x  3 TRAP-16  003B:00000388
0034 C0008E00002841B4 x  0 INTR-32  0028:C00041B4
.... ................ .  . ......................
</PRE></FONT></TD></TR></TBODY></TABLE>
<TABLE width="100%">
  <TBODY>
  <TR>
    <TD>
      <CENTER><B>Обязательная часть TSS-32</B></CENTER>
      <IMG alt="Пример TSS-32" 
      src="images/ex-tss.gif"> </TD>
    <TD>
      <CENTER><B>Дамп карты разрешения ввода-вывода того же TSS</B><BR>(карта 
      начинается со смещения 68h)</CENTER>
      <IMG alt="Дамп карты ввода-вывода" 
      src="images/ex-tss1.gif"> </TD>
  </TR></TBODY></TABLE>
&nbsp;&nbsp;&nbsp; Первый дескриптор в GDT зарезервирован, процессор не обращается 
к нему, поэтому операционная система может использовать его по своему усмотрению. 
Селекторы, ссылающиеся на него (0000h-0003h), называются <I>пустыми</I>. Пустой 
селектор можно поместить в сегментный регистр данных (DS, ES, FS, GS), при этом 
нарушения общей защиты не возникает, но адресовать память через пустой селектор 
нельзя. Процессор автоматически подменяет пустыми селекторами те селекторы, которые 
при смене уровня привилегий остаются в сегментных регистрах и недоступны с нового 
уровня привилегий. См. также <A 
href="modes.htm#SegmProt">"Защита на уровне сегментов"</A>.<BR>
&nbsp;&nbsp;&nbsp; На примере GDT можно видеть некоторые 
особенности сегментации - <I>альтернативный доступ к памяти</I> и <I>перекрытие 
сегментов</I>. Селекторы 0028h и 0030h хотя и выбирают различные дескрипторы, но 
по сути адресуют одно и то же пространство. Оба сегмента охватывают все линейное 
4Гбайтное пространство, только селектор 0028h обеспечивает доступ на выполнение 
и чтение (ссылается на сегмент кода), а селектор 0030h - на чтение и запись 
(ссылается на сегмент данных). Таким образом адреса 0028:12345678 и 
0030:12345678 указывают на один и тот же байт (слово, дв. слово) памяти. На 
таком принципе построена поддержка самомодифицирующихся программ. Т.к. эти 
сегменты описывают все линейное пространство, то очевидно, что все остальные 
сегменты являются кусочками этих двух сегментов, т.е. происходит перекрытие с 
этими сегментами. Кроме того, возможно перекрытие и между другими 
сегментами.<BR>
<P>&nbsp;&nbsp;&nbsp; На примере видно, что в данный момент занята задача с 
селектором TSS 0018h. Кроме того, в системе есть еще один TSS - с селектором 
0068h. Однако следует отметить, что оба TSS являются фиктивными и не могут быть 
использованы для переключения задач. Windows реализует многозадачность 
программными средствами. TSS 0018h используется для хранения указателя стека 
нулевого уровня привилегий (первый и второй уровни привилегий Windows не 
поддерживает) и для хранения карты разрешения ввода-вывода. Структура TSS и дамп 
карты ввода-вывода показаны на картинке.<BR>
  &nbsp;&nbsp;&nbsp; Особый интерес представляет карта разрешения ввода-вывода. 
  В Windows поле IOPL=0 для всех задач, поэтому при попытке DOS-программы (задача 
  в состоянии VM86) выполнить инструкцию ввода-вывода всегда проверяется карта 
  разрешения ввода-вывода. В TSS 0018h она начинается со смещения 68h. Биты, соответствующие 
  портам 00h-0Fh, содержат 1, значит при обращении к этим портам генерируется 
  нарушение общей защиты. Эти порты соответствуют регистрам адреса контроллера 
  DMA. Как известно, в них должны заноситься физические адреса памяти. Задача 
  в состоянии VM86 при вкюченном страничном преобразовании может вычислить только 
  <A 
title="Подробнее о вычислении физического одреса" 
href="modes.htm#Linear">линейные адреса</A>, поэтому Windows перехватывает обращение 
  к этим портам. Обработчик исключения #13, по всей видимости, вычисляет по указанным 
  линейным адресам физические и заносит их в регистры адреса контроллера DMA. 
  Для DOS-программы эти действия незаметны, в итоге она получает корректный результат. 
  Некоторые порты непосредственно доступны DOS-программе. Типичный пример - порты 
  принтера 378h, 379h, 37Ah. Им соответствуют биты 0, 1, 2 в байте по смещению 
  D7h. Обращение к этим портам происходит без нарушения общей защиты.<BR>
  &nbsp;&nbsp;&nbsp; См. также о TSS и карте ввода-вывода в главе <A 
href="modes.htm#MultiTask">"Мультизадачность"</A>. <A href="http://avsdov.newmail.ru/modes/modes.htm"><IMG alt="К началу реферата" 
src="images/to_top.gif" align=right border=0></A> <BR>
  &nbsp;<BR><FONT 
size=1><I>Последние изменения 21.03.1999.</I><BR></FONT><BR></P></BODY></HTML>
